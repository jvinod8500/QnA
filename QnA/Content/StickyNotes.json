[
  
  {
    "StickyId": 1,
    "Title": "Vinod",
    "Text": "please try adding one clicking plus icon on the top",
    "Lock": true,
    "Owner": "User"
  },
  {
    "StickyId": 2,
    "Title": "afadf",
    "Text": "asdfasdf",
    "Lock": true,
    "Owner": "jvinod8500@gmail.com"
  },
  {
    "StickyId": 4,
    "Title": "PPT",
    "Text": "https://office.live.com/start/PowerPoint.aspx",
    "Lock": true,
    "Owner": "Anil"
  },
  {
    "StickyId": 5,
    "Title": "Office",
    "Text": "https://office.live.com/start/PowerPoint.aspx",
    "Lock": true,
    "Owner": "Anil"
  },
  {
    "StickyId": 6,
    "Title": "db",
    "Text": "selfservices.database.windows.net",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 7,
    "Title": "pivotgrid",
    "Text": "http://www.syncfusion.com/downloads/support/forum/116303/CS_20729d43.zip",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 8,
    "Title": "pivot",
    "Text": "http://www.syncfusion.com/downloads/support/forum/121667/ze/WebApplication441992847766.zip",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 9,
    "Title": "st",
    "Text": "http://www.syncfusion.com/downloads/support/forum/116303/Sample_Pivot_Stored_Procedures_acb28582.zip",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 10,
    "Title": "param",
    "Text": "http://files2.syncfusion.com/dtsupport/forum/121667/ze/WebApplication44165547287.zip",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 11,
    "Title": "datatable",
    "Text": "http://www.syncfusion.com/downloads/support/forum/119969/DataTable_Demo-1155036870.zip",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 12,
    "Title": "layout",
    "Text": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=1024\" />\n    <title>@ViewBag.Title-Template</title>\n    <link href=\"~/Content/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"~/Content/Sync/ej.web.all.min.css\" rel=\"stylesheet\" />\n    <link href=\"~/Content/Sync/default.css\" rel=\"stylesheet\" />\n    <link href=\"~/Content/Sync/default-responsive.css\" rel=\"stylesheet\" />\n\n    <script src=\"~/Scripts/jquery-3.3.1.min.js\"></script>\n    <script src=\"~/Scripts/bootstrap.min.js\"></script>\n    <script src=\"~/Content/Sync/jsondata.min.js\"></script>\n    <script src=\"~/Content/Sync/jsrender.min.js\"></script>\n    <script src=\"~/Content/Sync/pivotgrid.datasource.js\"></script>\n    <script src=\"~/Content/Sync/ej.web.all.min.js\"></script>\n    <script src=\"~/Content/Sync/properties.js\" type=\"text/javascript\"></script>\n\n    <style>\n        .navbar-inverse .navbar-nav > li > a {\n            color: #fff !important;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\" style=\"color:white;background-color:#2E4A62\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                @Html.ActionLink(\"AutoMetrics\", \"LandingPage\", \"Home\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n            </div>\n            <div class=\"navbar-collapse collapse\" id=\"bs-navbar\">\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <li>\n                        <a class=\"page-scroll\" id=\"charts\" href=\"#CSV\">Charts</a>\n                    </li>\n                    <li>\n                        <a class=\"page-scroll\" id=\"percentage\" href=\"#Data\">Percentage</a>\n                    </li>\n                    <li>\n                        <a class=\"page-scroll\" id=\"pivot\" href=\"#\">Pivot Grid</a>\n                    </li>\n                  \n                    <li>\n                        <a class=\"page-scroll\" href=\"#Contact\">Contact</a>\n                    </li>\n                </ul>\n            </div>\n\n        </div>\n    </div>\n\n    <div class=\"container body-content\" style=\"padding-top:60px\">\n        @RenderBody()\n        <hr />\n        <footer>\n            <p>&copy; @DateTime.Now.Year - Infosys</p>\n        </footer>\n    </div>\n</body>\n</html>\n",
    "Lock": true,
    "Owner": "vinod"
  },
  {
    "StickyId": 13,
    "Title": "template.css",
    "Text": "\n@{\n    ViewBag.Title = \"Template\";\n}\n\n\n<body>\n    <div id=\"Piechart\" style=\"display:none\">       \n       <div id=\"container\"></div>\n    </div>  \n    <div id=\"Percentdata\" style=\"display:none\">\n        <a style=\"font-size:300px;text-decoration:none;cursor:pointer;margin-left:25%\">85%</a>\n    </div>\n    <div id=\"pivotnew\" style=\"display:none\">\n        <div id=\"PivotGrid\" style=\"height: 500px; width: 100%; overflow: auto\">\n        </div>                              \n    </div>       \n</body>\n\n<script type=\"text/javascript\" language=\"javascript\">\n    $(function () {\n        $(\"#container\").ejChart(\n        {\n            commonSeriesOptions:\n            {\n                labelPosition: 'outside',\n                tooltip: { visible: true, format: \"#point.x# : #point.y#%\" },\n                marker:\n                {\n                    dataLabel:\n                    {\n                        shape: 'none',\n                        visible: true,\n                        textPosition: 'top',\n                        border: { width: 1 },\n                        connectorLine: { height: 70, stroke: \"black\" }\n                    }\n                }\n            },\n\n            //Initializing Series\n            series:\n            [\n                {\n                    points: [{ x: \"Housing\", text: \"Housing\", y: 31 },\n                                { x: \"Food\", text: \"Food\", y: 16 },\n                                { x: \"Transportation\", text: \"Transportation\", y: 14 },\n                                { x: \"Clothing\", text: \"Clothing\", y: 6 },\n                                { x: \"Health care\", text: \"Health care\", y: 8 },\n                                { x: \"Education\", text: \"Education\", y: 17 },\n                                { x: \"Miscellaneous\", text: \"Miscellaneous\", y: 8 }],\n\n                    explodeIndex: 0,\n                    border: { width: 2, color: 'white' },\n                    type: 'pie',\n                    labelPosition: 'outside',\n                    startAngle: 145\n                }\n            ],\n\n            //Enabling 3D Chart\n            enable3D: true,\n            enableRotation: true,\n            depth: 30,\n            tilt: -30,\n            rotation: -30,\n            perspectiveAngle: 90,\n            isResponsive: true,\n            load: \"onchartload\",\n            title: { text: \"Expenditure shares on a child from birth through age 17\" },\n            size: { height: \"600\", width: \"970\" },\n            legend: { visible: false }\n        });\n    });\n\n    function onchartload(sender) {\n        loadTheme(sender);\n        if (sender.model.theme == \"flatdark\" || sender.model.theme == \"gradientdark\")\n            sender.model.commonSeriesOptions.marker.dataLabel.connectorLine.stroke = \"white\";\n    }\n</script>\n<script type=\"text/javascript\">\n    $(function () {\n        $(\"#PivotGrid\").ejPivotGrid({\n            dataSource: {\n                data: pivot_dataset,\n                rows: [\n                    {\n                        fieldName: \"Country\",\n                        fieldCaption: \"Country\"\n                    },\n                    {\n                        fieldName: \"State\",\n                        fieldCaption: \"State\"\n                    }\n                ],\n                columns: [\n\n                    {\n                        fieldName: \"Product\",\n                        fieldCaption: \"Product\"\n                    }\n                ],\n                values: [\n                    {\n                        fieldName: \"Amount\",\n                        fieldCaption: \"Amount\"\n                    },\n                    {\n                        fieldName: \"Quantity\",\n                        fieldCaption: \"Quantity\"\n                    }\n                ]\n            }\n        });\n    });\n</script>\n<script>\n    $(document).ready(function () {\n        $('#charts').click(function () {\n            $('#Percentdata').hide();\n            $('#pivotnew').hide();\n            $('#Piechart').show();\n        })\n        $('#percentage').click(function () {\n            $('#pivotnew').hide();\n            $('#Piechart').hide();\n            $('#Percentdata').show();\n        })\n        $('#pivot').click(function () {\n            $('#Piechart').hide();\n            $('#Percentdata').hide();\n            $('#pivotnew').show();\n        })\n    })\n</script>\n\n",
    "Lock": true,
    "Owner": "vinod"
  },
  {
    "StickyId": 14,
    "Title": "cam",
    "Text": "https://blobdata.azurewebsites.net/Content/webcam.html",
    "Lock": true,
    "Owner": "jvinod408"
  },
  {
    "StickyId": 15,
    "Title": null,
    "Text": "https://stackoverflow.com/questions/2927284/need-an-asp-net-mvc-long-running-process-with-user-feedback",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 16,
    "Title": "HOmecontroller for async",
    "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace DataGenerator.Controllers\n{\n    public class HomeController : AsyncController\n    {\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        public void SomeTaskAsync(int id)\n        {\n            AsyncManager.OutstandingOperations.Increment();\n            Task.Factory.StartNew(taskId =>\n            {\n                for (int i = 0; i < 100; i++)\n                {\n                    Thread.Sleep(50);\n                    HttpContext.Application[\"task\" + taskId] = i;\n                }\n                var result = \"result\";\n                AsyncManager.OutstandingOperations.Decrement();\n                AsyncManager.Parameters[\"result\"] = result;\n                return result;\n            }, id);\n        }\n\n        public ActionResult SomeTaskCompleted(string result)\n        {\n            return Content(result, \"text/plain\");\n        }\n\n        public ActionResult SomeTaskProgress(int id)\n        {\n            return Json(new\n            {\n                Progress = HttpContext.Application[\"task\" + id]\n            }, JsonRequestBehavior.AllowGet);\n        }\n        public ActionResult Chat()\n        {\n            return View();\n        }\n    }\n}\n\n\n\n\n\n\nHTML Page\n-----------------------------------------\n\n<script type=\"text/javascript\">\n$(function () {\n    var taskId = 543;\n    $.get('/home/SomeTaskAsync', { id: taskId }, function (result) {\n        window.clearInterval(intervalId);\n        $('#result').html(result);\n    });\n\n    var intervalId = window.setInterval(function () {\n        $.getJSON('/home/sometaskprogress', { id: taskId }, function (json) {\n            $('#progress').html(json.Progress + '%');\n        });\n    }, 500);\n});\n</script>\n\n<div id=\"progress\"></div>\n<div id=\"result\"></div>",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 17,
    "Title": "host SignalR",
    "Text": "https://docs.microsoft.com/en-us/aspnet/signalr/overview/deployment/using-signalr-with-azure-web-sites",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 18,
    "Title": "chat app signalr",
    "Text": "https://dzone.com/articles/lets-chat-application-using-signalr-in-mvc",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 19,
    "Title": null,
    "Text": null,
    "Lock": true,
    "Owner": "abc@gmail.com"
  },
  {
    "StickyId": 20,
    "Title": null,
    "Text": "https://www.google.co.in/search?q=how+to+implement+excelsparklines+with+c%23&rlz=1C1GCEA_enIN804IN805&oq=how+to+implement+excelsparklines+with+c%23&aqs=chrome..69i57.17199j0j7&sourceid=chrome&ie=UTF-8",
    "Lock": true,
    "Owner": "abc@gmail.com"
  },
  {
    "StickyId": 21,
    "Title": "DataGenerator cs",
    "Text": "using DataGenerator.Hubs;\nusing DataGenerator.Models;\nusing Microsoft.AspNet.SignalR;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace DataGenerator.Controllers\n{\n    public class DataGeneratorController : Controller\n    {\n        // GET: DataGenerator\n        Stopwatch sw = new Stopwatch();\n        ConstantClass objConstantClass = new ConstantClass();\n        ColumnsListClass objColumnsListClass = new ColumnsListClass();\n        DataSet dsGeneric;\n        DataTable dtRowCount = new DataTable();\n        string strGeneratingFileName = string.Empty;\n        public List<DBTable> tableslist;\n        public string currentgeneratedtable = string.Empty;\n        public int totaltablescount =0;\n        public int currentprocessedcount =0;\n        public bool dbwaitover = false;\n\n        public ActionResult Index()\n        {\n            return View();\n        }\n        public ActionResult Chat()\n        {\n            \n            return View();\n        }\n        public JsonResult SQLConnectionCheck(string constr)\n       {\n            constr=constr.Replace(\"%20\",\" \");\n            Session[\"con\"] = constr;\n           \n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n                    return Json(true, JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n\n        public JsonResult GetTablesFromSQL(string constr)\n        {\n           tableslist = new List<DBTable>();\n            string SQLToGetColumns = @\"SELECT  T.name AS TableName,C.name AS ColumnName ,P.name AS DataType FROM   sys.objects AS T\n                                      JOIN sys.columns AS C ON T.object_id = C.object_id JOIN sys.types AS P ON C.system_type_id = P.system_type_id\n\t   \t                                LEFT OUTER JOIN  sys.index_columns ic ON ic.object_id = c.object_id AND ic.column_id = c.column_id\n                                         LEFT OUTER JOIN sys.indexes i ON ic.object_id = i.object_id AND ic.index_id = i.index_id\n                                        WHERE  T.type_desc = 'USER_TABLE' AND P.name <>'sysname' ORDER BY T.name\";\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n\n                    using (SqlCommand cmd = new SqlCommand(SQLToGetColumns, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                tableslist.Add(new DBTable() { TableName = dr[0].ToString(),ColumnName= dr[1].ToString(),DataType= dr[2].ToString() });\n                            }\n                        }\n                    }\n                    return Json(tableslist, JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n\n        public  JsonResult Generate(bool all,string constr)\n        {\n            GetTablesFromSQL(constr);\n            IFormatter formatter = new BinaryFormatter();\n            Stream stream = new FileStream(Server.MapPath(\"~/Settings.txt\"), FileMode.Create, FileAccess.Write);\n            formatter.Serialize(stream, objColumnsListClass);\n            stream.Close();\n            if (!all)\n            {\n                //GenerateFile(objColumnsListClass, txtFolderPath.Text, true, false);\n            }\n            else\n            {\n                List<string> GeneratedTablelist = new List<string>();\n                int Count= tableslist.Select(x => x.TableName).Distinct().Count();int processedcount = 0;\n                List<FKPKRelation> fkpklst = GetFKPKRelation(constr);\n                foreach (var TableName in tableslist.Select(x => x.TableName).Distinct())\n                {\n                    List<FKPKRelation> ftable = fkpklst.Where(c => c.Referencing_Table_Name == TableName).ToList();\n                    if (ftable!=null)\n                    {\n                        //Now Create all of the directories\n                        string sourcepath = Server.MapPath(\"~/Content/Find/\");\n                        string DestinationPath = Server.MapPath(\"~/Content/GeneratedData/\");\n                        string d = Directory.GetFiles(DestinationPath, TableName + \".csv*\", SearchOption.TopDirectoryOnly).FirstOrDefault();\n                        if (!System.IO.File.Exists(d))\n                         System.IO.File.Copy(sourcepath, DestinationPath, true);\n                        foreach (string rtable in ftable.Select(x=>x.Referenced_Table_Name).Distinct())\n                        {\n                            string[] rcolumns=ftable.Where(p => p.Referenced_Table_Name == rtable).Select(x => x.Referencing_Column_Name).ToArray();\n                            string[] rlines = System.IO.File.ReadAllLines(d);\n                            List<string> header = rlines[0].Split(',').ToList();\n                            int[] indexes = header.Where(x => rcolumns.Contains(x)).Select(c=>header.IndexOf(c)).ToArray();\n                            for (int i = 1; i < rlines.Length; i++)\n                            {\n                                if (indexes.Contains(i))\n                                {\n                                    \n                                }\n                            }\n                        }\n                       \n                    }\n                    List<string> comnslist = tableslist.Where(x => x.TableName == TableName).Select(p => p.ColumnName).ToList();\n                    List<string> datatypelist = tableslist.Where(x => x.TableName == TableName).Select(p => p.DataType).ToList();\n                    ColumnsListClass objColumnsListClassAllTables = new ColumnsListClass();\n\n                    objColumnsListClassAllTables.ColumnsObject.Add\n\n                    //DataView dvColumnNames1 = new DataView(dsGeneric.Tables[0]);\n                    //dvColumnNames1.RowFilter = \"TableName='\" + TableName + \"'\";\n                    //DataTable distinctColValues = dvColumnNames1.ToTable(true, \"ColumnName\", \"DataType\");\n                    //DataView dvRowsCheck = new DataView(dtRowCount);\n                    //dvRowsCheck.RowFilter = \"TableName='\" + TableName.ToString() + \"'\";\n                    //DataTable distinctRowCount = dvRowsCheck.ToTable(true, \"RowCount\", \"Include\");\n                    objColumnsListClassAllTables.RowCount = 100;// Convert.ToInt64(distinctRowCount.Rows[0][\"RowCount\"].ToString());\n                    objColumnsListClassAllTables.TableName = TableName.ToString();\n                    for (int i = 0; i < comnslist.Count; i++)\n                    {\n                        SaveColumnValues(objColumnsListClassAllTables, comnslist[i], datatypelist[i], false);\n                        string FileName = Path.GetDirectoryName(\"D/Unity\") + \"\\\\\" + TableName + \".csv\";\n                        strGeneratingFileName = FileName;\n                        GenerateFile(objColumnsListClassAllTables, FileName, true, false);\n                    }\n                    processedcount++;\n                    SendMessage(String.Join(\",\", new string[] { TableName+\".csv\", processedcount.ToString(),Count.ToString()}));\n                    GeneratedTablelist.Add(TableName);\n                }\n\n            }\n            return Json(true, JsonRequestBehavior.AllowGet);\n        }\n        public void SendMessage(string message)\n        {\n            var context = GlobalHost.ConnectionManager.GetHubContext<ChatHub>();\n            context.Clients.All.progress(message);\n        }\n        public void SaveColumnValues(ColumnsListClass ColumnsClassObject, string SelectedColumn, string SelectedDataType, bool isprimarykey)\n        {\n\n            // lblSelected.Visible = true;\n            if (ColumnsClassObject.ColumnsObject.Count > 0)\n            {\n                for (int i = ColumnsClassObject.ColumnsObject.Count - 1; i >= 0; i--)\n                {\n                    object item = ColumnsClassObject.ColumnsObject[i];\n                    dynamic dyn = item;\n                    if (SelectedColumn == dyn.ColumnName.ToString())\n                    {\n                        ColumnsClassObject.ColumnsObject.Remove(item);\n                    }\n                }\n            }\n            switch (SelectedDataType)\n            {\n                case \"int\":\n                case \"bit\":\n                case \"smallint\":\n                case \"tinyint\":\n                case \"bigint\":\n                    IntClass objInt = new IntClass();\n                    objInt.ColumnName = SelectedColumn;\n                    objInt.ColumnDataType = SelectedDataType;\n                    if (/*rdoIncrement.Checked == true ||*/ isprimarykey == true)\n                        objInt.IntType = \"Increment\";\n                    else\n                        objInt.IntType = \"MinMax\";\n                    objInt.StartAt = Convert.ToInt32(/*IntStartAt.Value*/0);\n                    objInt.IncrementBy = Convert.ToInt32(/*IntIncrementBy.Value*/1);\n                    objInt.Min = Convert.ToInt32(/*IntMin.Value*/1);\n                    objInt.Max = Convert.ToInt32(/*IntMax.Value*/200);\n                    ColumnsClassObject.ColumnsObject.Add(objInt);\n\n                    break;\n                case \"decimal\":\n                case \"float\":\n                case \"money\":\n                case \"numeric\":\n                    DecimalClass objDecimal = new DecimalClass();\n                    objDecimal.ColumnName = SelectedColumn;\n                    objDecimal.ColumnDataType = SelectedDataType;\n                    objDecimal.DecimalPlaces = Convert.ToInt32(/*decimalPlace.Value*/2);\n                    objDecimal.DecimalMin = Convert.ToDouble(/*decimalMin.Value*/0.00);\n                    objDecimal.DecimalMax = Convert.ToDouble(/*decimalMax.Value*/1000.00);\n                    ColumnsClassObject.ColumnsObject.Add(objDecimal);\n                    break;\n                case \"char\":\n                case \"nvarchar\":\n                case \"varchar\":\n                    TextClass objText = new TextClass();\n                    objText.ColumnName = SelectedColumn;\n                    objText.ColumnDataType = SelectedDataType;\n                    if (/*rdoFixedLength.Checked == true*/false)\n                        objText.IntType = \"FixedLength\";\n                    else\n                        objText.IntType = \"RandomLength\";\n                    objText.NoofWords = Convert.ToInt32(/*NoOfWords.Value*/10);\n                    objText.NoOfWordsFrom = Convert.ToInt32(/*NoofWordsfrom.Value*/5);\n                    objText.NoOfWordsTo = Convert.ToInt32(/*NoofWordsTo.Value*/10);\n                    ColumnsClassObject.ColumnsObject.Add(objText);\n                    break;\n                case \"datetime\":\n                case \"datetime2\":\n                case \"smalldatetime\":\n                    DateClass objDate = new DateClass();\n                    objDate.ColumnName = SelectedColumn;\n                    objDate.ColumnDataType = SelectedDataType;\n                    objDate.MinDate = DateTime.Now.AddYears(-1); /*dtMinDate.Value;*/\n                    objDate.MaxDate = DateTime.Now; /*dtMaxDate.Value;*/\n                    ColumnsClassObject.ColumnsObject.Add(objDate);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        private void GenerateFile(ColumnsListClass objColumnsListClassCurrent, string OutputFileName, bool OverrideFile, bool MsgBox)\n        {\n            StringBuilder buffer = new StringBuilder(5048576);\n            OutputFileName = Server.MapPath(\"~/Content/GeneratedData/\") + objColumnsListClassCurrent.TableName + \"_\" + DateTime.Now.ToString(\"dd-MM-yyyy\") + \".csv\";// Path.GetDirectoryName(txtFolderPath.Text)+ OutputFileName;\n            //strGeneratingFileName = OutputFileName;\n            string delimiter = \",\";\n            //if (System.IO.File.Exists(OutputFileName))\n            //{\n            //    if (OverrideFile == true)\n            //    {\n            //        System.IO.File.Delete(OutputFileName);\n            //    }\n            //    else\n            //    {\n            //        //DialogResult dr = MessageBox.Show(\"File exists. Overwrite?\", \"Confirmation\", MessageBoxButtons.YesNoCancel,\n            //        //MessageBoxIcon.Information);\n            //        //if (dr == DialogResult.Yes)\n            //        //{\n            //        //    File.Delete(OutputFileName);\n            //        //}\n            //        //else\n            //        //{\n            //        //    return;\n            //        //}\n            //    }\n            //}\n\n            ConstantClass objConstantClass = new ConstantClass();\n\n            string colNames = string.Empty;\n\n            for (int i = 0; i <= objColumnsListClassCurrent.ColumnsObject.Count - 1; i++)\n            {\n                dynamic dynitem = objColumnsListClassCurrent.ColumnsObject[i];\n                if (i == objColumnsListClassCurrent.ColumnsObject.Count - 1)\n                    colNames = colNames + dynitem.ColumnName.ToString();\n                else\n                    colNames = colNames + dynitem.ColumnName.ToString() + delimiter;\n            }\n\n            if (/*chkIncludeColumnNamesFirstRow.Checked == */true)\n            {\n                System.IO.File.WriteAllText(OutputFileName, colNames);\n            }\n            for (int i = 1; i <= objColumnsListClassCurrent.RowCount; i++)\n            {\n               // backgroundWorker1.ReportProgress(i);\n                string RowValues = string.Empty;\n                int varcharCount = 0;\n\n                for (int j = 0; j <= objColumnsListClassCurrent.ColumnsObject.Count - 1; j++)\n                {\n                    dynamic dynitem = objColumnsListClassCurrent.ColumnsObject[j];\n                    // ColumnValues[i] = GenerateValues(dynitem,j-1);\n                    //                    dynamic dynitem = objColumnsListClass.ColumnsObject[j];\n                    //strValues = objConstantClass.MaleNames[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n\n\n                    string strValues = string.Empty;\n                    if (/*chkMakeNULLforExcept1TextValue.Checked ==*/ true && (dynitem.ColumnDataType == \"char\" || dynitem.ColumnDataType == \"nvarchar\" || dynitem.ColumnDataType == \"varchar\"))\n                    {\n                        //if (dynitem.ColumnDataType == \"char\" || dynitem.ColumnDataType == \"nvarchar\" || dynitem.ColumnDataType == \"varchar\")\n                        //{\n                        varcharCount += 1;\n                        if (varcharCount == 2)\n                        {\n                            strValues = \"\";\n                            varcharCount = 1;\n                        }\n                        else\n                        {\n                            strValues = GenerateValues(dynitem, i);\n                        }\n                    }\n                    else\n                    {\n                        strValues = GenerateValues(dynitem, i);\n                    }\n                    if (j == objColumnsListClassCurrent.ColumnsObject.Count - 1)\n                    {\n                        RowValues = RowValues + strValues;\n                    }\n                    else\n                    {\n                        RowValues = RowValues + strValues + delimiter;\n                    }\n                    strValues = \"\";\n\n                }\n               // OutputFileName = @\"D:\\Unity\\\" + objColumnsListClassCurrent.TableName + \"_\" + DateTime.Now.ToString(\"dd-MM-yyyy\") + \".csv\";// Path.GetDirectoryName(txtFolderPath.Text)+ OutputFileName;\n\n                // OutputStreamWriter.WriteToFile(OutputFileName, RowValues);\n                buffer.Append(RowValues);\n                if (buffer.Length > 5048576 - 1024)\n                {\n                    // buffer.Remove((buffer.Length - 1), 1);\n                    System.IO.File.WriteAllText(OutputFileName, buffer.ToString());\n                    buffer.Length = 0;\n                }\n                else if (i == objColumnsListClassCurrent.RowCount)\n                {\n                    // buffer.Remove((buffer.Length - 1), 1);\n                    System.IO.File.WriteAllText(OutputFileName, buffer.ToString());\n                }\n                else\n                {\n                    buffer.AppendLine();\n                }\n                RowValues = \"\";\n                //if ((OutputNumRows.Value > 0) && (i > 0))\n                //{\n                //    lblTotalRecords.Text = \"Generated \" + i.ToString() + \" of \" + OutputNumRows.Value.ToString() + \" records.\";\n                //    //lblETA.Text = $\"ETA: {timer.GetEtc1(i)}\";\n                //}\n            }\n            // sw.Stop();\n\n            // lblTotalRecords.Text = \"Generated \" + OutputNumRows.Value.ToString() + \" of \" + OutputNumRows.Value.ToString() + \" records.\";\n            // lblETA.Text = $\"Time Taken(hh:mm:ss:ms): {string.Format(\"{0:00}:{1:00}:{2:00}:{3:00}\", sw.Elapsed.Hours, sw.Elapsed.Minutes, sw.Elapsed.Seconds, sw.Elapsed.TotalMilliseconds)}\";\n            //  progressBar1.Value = (int)OutputNumRows.Value;\n            // lblFileOutput.Text = \"File Generated to \" + OutputFileName;\n\n            //if (MsgBox)\n            //{ MessageBox.Show(\"File Successfully Generated !!!\"); }\n        }\n        public string GenerateValues(dynamic ColumnsClassObject, int lastIncrementVal)\n        {\n\n            string outputValue = string.Empty;\n            dynamic dyn = ColumnsClassObject;\n            string ColumnDataType = dyn.ColumnDataType.ToString();\n            switch (ColumnDataType)\n            {\n                case \"int\":\n                case \"bit\":\n                case \"smallint\":\n                case \"tinyint\":\n                case \"bigint\":\n                    if (dyn.IntType == \"Increment\")\n                    {\n                        lastIncrementVal = (lastIncrementVal - 1) * dyn.IncrementBy;\n                        lastIncrementVal += dyn.IncrementBy;\n                        outputValue = Convert.ToString(lastIncrementVal);\n                    }\n                    else\n                    {\n                        outputValue = Convert.ToString(CommonFunctionClass.GetRandomNumber(dyn.Min, dyn.Max));\n                    }\n\n                    break;\n                case \"decimal\":\n                case \"float\":\n                case \"money\":\n                case \"numeric\":\n                    outputValue = Convert.ToString(CommonFunctionClass.GetRandomDecimalNumber(dyn.DecimalMin, dyn.DecimalMax, dyn.DecimalPlaces));\n                    break;\n                case \"char\":\n                case \"nvarchar\":\n                case \"varchar\":\n\n                    if (/*chkNullVarcharValues.Checked == true*/false)\n                    {\n                        outputValue = \"\";\n                    }\n                    else\n                    {\n                        string output = string.Empty;\n                        string randomString = string.Empty;\n                        if (dyn.IntType == \"FixedLength\" && dyn.NoofWords != 0)\n                        {\n                            for (int i = 0; i < dyn.NoofWords; i++)\n                            {\n                                //if (i % 2 == 0)\n                                //{\n                                //    Random rnd = new Random();\n                                //    int size = rnd.Next(0, objConstantClass.BusinessKeyWords.Length);\n                                //    //randomString = CommonFunctionClass.RandomString(size);\n                                //    //randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n\n                                //    randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[size];\n                                //}\n                                //else\n                                //{\n                                //    randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n                                //}\n                                //string randomString = objConstantClass.BusinessKeyWords[Random.Range(0, objConstantClass.BusinessKeyWords.Length)];\n                                Random rnd1 = new Random();\n                                int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                                // string random = objConstantClass.BusinessKeyWords[r].ToString();\n                                randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[r];\n                                output = output + randomString + \" \";\n                            }\n                            outputValue = output.Trim();\n                            // outputValue = CommonFunctionClass.RandomText(dyn.ColumnName.ToString(), true, dyn.NoofWords, 0, 0,false);\n                        }\n                        else if (dyn.IntType == \"RandomLength\" && dyn.NoofWords != 0)\n                        {\n                            //Random rnd = new Random();\n                            //int size = rnd.Next(dyn.NoOfWordsFrom, dyn.NoOfWordsTo + 1);\n                            //string output = string.Empty;\n                            //for (int i = 0; i < size; i++)\n                            //{\n                            //    string randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n                            //    //Random rnd1 = new Random();\n                            //    //int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                            //    //string randomString = objConstantClass.BusinessKeyWords[r].ToString();\n                            //    output = output + randomString + \" \";\n                            //}\n                            //outputValue = output.Trim();\n\n                            Random rnd1 = new Random();\n                            int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                            // string random = objConstantClass.BusinessKeyWords[r].ToString();\n                            randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[r];\n                            output = output + randomString + \" \";\n                            outputValue = output;\n                            //outputValue = CommonFunctionClass.RandomText(dyn.ColumnName.ToString(), false, 0, dyn.NoOfWordsFrom, dyn.NoOfWordsTo, false);\n                        }\n                        else\n                        {\n                            outputValue = \"\";\n                        }\n                    }\n                    break;\n                case \"datetime\":\n                case \"datetime2\":\n                case \"smalldatetime\":\n                    outputValue = Convert.ToString(CommonFunctionClass.GetRandomDate(dyn.MinDate, dyn.MaxDate));\n                    break;\n                default:\n                    break;\n            }\n\n            return outputValue;\n\n        }\n\n        public JsonResult GetGenerationStatus(string message)\n        {\n            for (int i = 0; i < 100; i++)\n            {\n                SendMessage(message+\"_\"+i);\n            }\n            return Json(new { Run = false }, JsonRequestBehavior.AllowGet);\n\n\n            //if ((bool)Session[\"dbwaitover\"])\n            //{\n            //    int totaltablescount = (int)Session[\"totaltablescount\"];\n            //    int currentprocessedcount = (int)Session[\"currentprocessedcount\"];\n            //    string currentgeneratedtable = (string)Session[\"currentgeneratedtable\"];\n            //    return Json(new { Run = true, TableName = currentgeneratedtable, Records = currentprocessedcount + \"/\" + totaltablescount, Percentage = currentprocessedcount * 100 / totaltablescount }, JsonRequestBehavior.AllowGet);\n            //}\n            //else\n            //    return Json(new { Run = false }, JsonRequestBehavior.AllowGet);\n\n        }\n\n        public List<FKPKRelation> GetFKPKRelation(string constr)\n        {\n            List<FKPKRelation> fkpktableslist = new List<FKPKRelation>();\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n\n                    string query = System.IO.File.ReadAllText(Server.MapPath(\"~/fetchingfk.txt\"));\n                    using (SqlCommand cmd = new SqlCommand(query, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                fkpktableslist.Add(new FKPKRelation() {\n                                    Referencing_Table_Name = dr[0].ToString(), Referencing_Column_Name = dr[1].ToString(), Referenced_Table_Name = dr[2].ToString(),Referenced_Column_As_FK=dr[2].ToString()\n                                });\n                            }\n                        }\n                    }\n                    return fkpktableslist;\n                }\n            }\n            catch (Exception ex)\n            {\n                return fkpktableslist;\n            }\n        }\n\n    }\n}",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 22,
    "Title": "PC NAMES",
    "Text": "HYDPCM389764D\n\nHYDPCM377395D",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 23,
    "Title": null,
    "Text": null,
    "Lock": true,
    "Owner": "abc@gmail.com"
  },
  {
    "StickyId": 24,
    "Title": "tooltip",
    "Text": "\n\n.input {\n    position: relative;\n}\n\n.tooltip {\n    display: none;\n}\n\n.input:hover .tooltip {\n    background: blue;\n    border-radius: 3px;\n    bottom: -40px;\n    color: white;\n    display: inline;\n    height: 30px;\n    left: 0;\n    line-height: 30px;\n    position: absolute;\n}\n\n.input:hover .tooltip:before {\n    display: block;\n    content: \"\";\n    position: absolute;\n    top: -5px;\n    width: 0; \n\theight: 0; \n\tborder-left: 5px solid transparent;\n\tborder-right: 5px solid transparent;\n\t\n\tborder-bottom: 5px solid blue;\n}",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 25,
    "Title": "signalr",
    "Text": "@section scripts {\n    <!--Script references. -->\n    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->\n    <!--Reference the SignalR library. -->\n    <script src=\"~/Scripts/jquery.signalR-2.3.0.min.js\"></script>\n    <!--Reference the autogenerated SignalR hub script. -->\n    <script src=\"~/signalr/hubs\"></script>\n    <!--SignalR script to update the chat page and send messages.-->\n    <script>\n        $(function () {\n            // Reference the auto-generated proxy for the hub.\n            var chat = $.connection.chatHub;\n            // Create a function that the hub can call back to display messages.\n            chat.client.addNewMessageToPage = function (name, message) {\n                // Add the message to the page.\n                $('#discussion').append('<li><strong>' + htmlEncode(name)\n                    + '</strong>: ' + htmlEncode(message) + '</li>');\n            };\n            chat.client.progress = function (data) {\n                debugger\n                var res = data.split(',');\n                var per = (res[1] * 100 / tablecount).toFixed(2);\n                if (res[1] == tablecount) {\n                    $('#recordsprocessed').html(\"Data Generation Completed!!\");\n                }\n                else $('#recordsprocessed').html(\"(\" + res[1] + \"/\" + tablecount + \") \" + res[0]);\n                var progresObj = $(\"#progressBar\").data(\"ejProgressBar\");\n                progresObj.option(\"text\", per + \"%\");\n                progresObj.option(\"percentage\", per);\n            }\n            chat.client.dimtable = function (data) {\n                debugger\n                $('</br><span>' + data+'</span>').insertAfter(\"#generateselecteddataalone\");\n            }\n            // Start the connection.\n            $.connection.hub.start().done(function () {\n                $('#sendmessage').click(function () {\n                    // Call the Send method on the hub.\n                    chat.server.send($('#displayname').val(), $('#message').val());\n                    // Clear text box and reset focus for next comment.\n                    $('#message').val('').focus();\n                });\n            });\n        });\n\n        // This optional function html-encodes messages for display in the page.\n        function htmlEncode(value) {\n            var encodedValue = $('<div />').text(value).html();\n            return encodedValue;\n        }\n    </script>\n}",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 26,
    "Title": "fksearchmanually",
    "Text": "        public List<FKPKRelation> GetforeignColumns()\n\n        {\n            List<FKPKRelation> fkpktableslist = new List<FKPKRelation>();\n            DirectoryInfo d = new DirectoryInfo(@\"D:\\Sahithi\\sahiticsv\");//Assuming Test is your Folder\n            FileInfo[] filenames = d.GetFiles(\"*.csv\");\n            //string[] filenames = Directory.GetFiles(@\"D:\\Sahithi\\sahiticsv\", \"*.csv\");\n            foreach (FileInfo files in filenames)\n            {\n\n                //var Tablename = files.Substring(files.IndexOf('.') + 1, (files.LastIndexOf('.') - files.IndexOf('.') - 1));\n                var Tablename = Path.GetFileNameWithoutExtension(files.Name).ToString();\n                using (StreamReader reader = new StreamReader(files.FullName))\n                {\n                    string[] columnlist = (reader.ReadLine() ?? \"\").ToString().Split(',');\n                    columnlist = columnlist.Where(value => value != \"ModifiedDate\").ToArray();\n                    foreach (string column in columnlist)\n                    {\n                        foreach (FileInfo reffiles in filenames)\n                        {\n                            var refTablename = Path.GetFileNameWithoutExtension(reffiles.Name).ToString();\n                            //var refTablename = reffiles.Substring(reffiles.IndexOf('.') + 1, (reffiles.LastIndexOf('.') - reffiles.IndexOf('.') - 1));\n                            if (refTablename != Tablename)\n                            {\n                                using (StreamReader reader1 = new StreamReader(reffiles.FullName))\n                                {\n                                    string[] refcolumnlist = (reader1.ReadLine() ?? \"\").ToString().Split(',');\n                                    if (refcolumnlist.Contains(column))\n                                    {\n                                        fkpktableslist.Add(new FKPKRelation()\n                                        {\n                                            Referenced_Table_Name = refTablename,\n                                            Referencing_Column_Name = column,\n                                            Referenced_Column_As_FK = column,\n                                            Referencing_Table_Name = Tablename\n                                        });\n                                        System.IO.File.WriteAllText(@\"D:\\Fk.json\", JsonConvert.SerializeObject(fkpktableslist));\n                                    }\n                                    \n                                }\n                            }\n                        }\n\n\n                    }                  \n                }\n            }\n            return fkpktableslist;\n        }\n",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 27,
    "Title": "cshtml",
    "Text": "\n@{\n    ViewBag.Title = \"Index\";\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n<style>\n    .addtoconfig{\n        font-size:9px;\n        cursor:pointer;\n        float:right;\n        padding-top:10px;\n    }\n   .e-btn{\n        vertical-align: baseline!important;\n        font-size:15px!important;}\n   fieldset{\n       padding: .35em .625em .75em!important;\n    margin: 0 2px!important;\n    border: 1px solid #333!important;\n   }\n   #generateloader,.loader{\n       display:none;\n   }\n   legend{\n       font-size:14px!important;\n       margin-bottom: 5px!important;\n   }\n   .e-btn-large{\n       height:auto !important;\n   }\n   #generateselecteddataalone,#generatealltables{\n        font-size: medium !important;\n   }\n   fieldset{\n           font-size: 12px !important;\n   }\n   label{\n       font-weight: normal !important;\n   } \n   input[type=text]{\n           border: none;\n    border-bottom: groove 2px;\n    outline: none;\n   }\n   .errortooltip {\n    background: red;\n    padding: 2px;\n    bottom: 74%;\n    color: white;\n    display: none;\n    position: absolute;\n}\n .body-content{\n         margin-left: 20px;\n    margin-right: 10px;\n    margin-top: 10px;\n    width:97%\n }\n #Configuration_wrapper{\n     top:20px!important;\n }\n #defaultTab> .row{\n     height:100%\n }.daterangepick{\n      width:150px;\n  }\n  #Continue{\n    margin-left: 85%;\n    position: absolute;\n    bottom: 2px;\n    border: groove 2px #3277B2;\n    background-color: #3277B2;\n  }\n</style>\n\n<div id=\"FKAddTemplate\" style=\"display: none\" title=\"FK Add\">\n    <table cellspacing=\"10\">\n        <tr>\n            <td style=\"text-align: right;\">\n                Referencing Table\n            </td>\n            <td style=\"text-align: left\">\n                <input id=\"Referencing_Table\" style=\"text-align: right; width: 116px; height: 28px\" />\n            </td>\n            <td style=\"text-align: right;\">\n                Referencing Column\n            </td>\n            <td style=\"text-align: left\">\n                <input id=\"Referencing_Column\" style=\"width: 116px; height: 28px\" />\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align: right;\">\n                Referenced Table\n            </td>\n            <td style=\"text-align: left\">\n                <input id=\"Referenced_Table\" style=\"text-align: right; width: 116px; height: 28px\" />\n            </td>\n            <td style=\"text-align: right;\">\n                Referenced Column\n            </td>\n            <td style=\"text-align: left\">\n                <input id=\"Referenced_Column\" style=\"width: 116px; height: 28px\" />\n            </td>\n        </tr>\n    </table>\n    <hr>\n    <input id=\"savefk\" class=\"e-btn\" type=\"button\" value=\"Save\" />\n</div>\n<div id=\"GenerateSample\" style=\"display: none\" title=\"Generate\">\n    <input id=\"samplegenpath\" style=\"width:100%\" type=\"text\" placeholder=\"Give your folder to generate sample\" /><br />\n    <input id=\"generatesamplebtn\" class=\"e-btn\" type=\"button\" value=\"Generate\" /><img class=\"loader\" src=\"~/Content/Sync/images/waitingpopup.gif\" /><br />\n    <label id=\"generatemsg\" style=\"display:none\"></label>\n</div>\n\n<div id=\"Configuration\" style=\"display:none\" title=\"Table Configuration\">\n    <div id=\"defaultTab\">\n        <ul>\n            <li><a href=\"#tblcnt\">TableCount</a></li>\n            <li><a href=\"#tblconfig\">Table Configuration</a></li>\n            <li><a href=\"#fkconfig\">FK Configuration</a></li>\n        </ul>\n        <div id=\"tblcnt\">\n            <div class=\"row\" style=\"font-size:xx-large; margin-left: 30%;\">\n                Tables Count: <label id=\"rowcount\"></label>\n            </div>\n        </div>\n        <div id=\"tblconfig\">\n            <div class=\"row\">\n                <div id=\"TableConfigGrid\"></div>\n            </div>\n        </div>\n        <div id=\"fkconfig\">\n            <div class=\"row\">\n                <input id=\"fetchfromsource\" class=\"e-btn\" type=\"button\" value=\"Fetch from Source\" />\n                <input id=\"fetchfrommetadata\" class=\"e-btn\" type=\"button\" value=\"Fetch from Metadata\" />\n                <input id=\"manual\" class=\"e-btn\" type=\"button\" value=\"Manual\" />\n                <input id=\"SaveFKConfig\" class=\"e-btn\" type=\"button\" value=\"Save FK Configuration\" />\n                <div id=\"FKConfigGrid\"></div>\n            </div>\n        </div>\n    </div>\n    <input id=\"Continue\" class=\"e-btn\" type=\"button\" value=\"Save & Continue\" />\n</div>\n<div class=\"body-content\">\n    <div class=\"row\">\n        <label for=\"constr\">DB ConnectionString:</label>\n        <input style=\"width:68%\" id=\"constr\" value=\"Data Source=(LocalDb)\\MSSQLLocalDB;Initial Catalog=AdventureWorks;Integrated Security=SSPI;\" name=\"constr\" type=\"text\" /><span class=\"errortooltip\">Please check Connection String</span>\n        <input class=\"e-btn\" id=\"testcon\" type=\"button\" value=\"Test\" />&nbsp;\n        <input id=\"configure\" class=\"e-btn\" type=\"button\" value=\"Configure\" />&nbsp;\n        @*<input id=\"loadtables\" class=\"e-btn\" type=\"button\" value=\"Load Tables\" />&nbsp;*@\n        <img class=\"loader\" src=\"~/Content/Sync/images/waitingpopup.gif\" />\n    </div>\n    <div class=\"row\" id=\"errormsg\" style=\"color:red;display:none;padding-left:15%\">\n        @*<div class=\"errorMessage\" style=\"position:absolute; left:100%;\"> Error message </div>*@\n    </div>\n    <div class=\"row\" style=\"margin-top:20px;margin-left:0px\">\n        <div style=\"float:left;width:35%\">\n            <input name=\"table\" style=\"display:none\" id=\"tableslst\" type=\"text\" />\n            <label for=\"column\" style=\"display:none\">Columns:</label><ul name=\"column\" id=\"columnslist\" style=\"height:290px;border: 1px solid #BCBCBE;padding-left: 22px; \"></ul>\n        </div>\n        <div style=\"float:right;width:65%;\">\n            <div id=\"columnconfigsection\">\n                <fieldset id=\"type\">\n                    DataType: <label id=\"stype\"></label>\n                    <input type=\"checkbox\">Is Primary <br />\n                    No of columns selected configuration:&emsp;<input id=\"noofcolumnsconfiguration\" style=\"color:red;width:50%\" type=\"text\"><br>\n                </fieldset>\n                <fieldset id=\"finteger\">\n                    <legend>Integer:</legend>\n                    Start At:<input id=\"startat\" type=\"number\">&emsp; Incremented By: <input id=\"incrementedby\" type=\"number\">\n                    Min:<input class=\"min\" type=\"number\">&emsp; Max:<input class=\"max\" type=\"number\">    <a class=\"addtoconfig\">Add to config</a>\n                </fieldset>\n                <fieldset id=\"fdecimal\">\n                    <legend>Decimal:</legend>\n                    Decimal Places: <input type=\"number\">\n                    Min: <input class=\"min\" type=\"text\">\n                    Max: <input class=\"max\" type=\"text\"><a class=\"addtoconfig\">Add to config</a>\n                </fieldset>\n                <fieldset id=\"fdate\">\n                    <legend>Date:</legend>\n                    Min Date: <input id=\"mindate\" type=\"date\">\n                    Max Date: <input id=\"maxdate\" type=\"date\"><a class=\"addtoconfig\">Add to config</a>\n                </fieldset>\n            </div>\n            <div style=\"margin:5px;\">\n                <input id=\"savecolumnconfig\" class=\"e-btn\" type=\"button\" value=\"SaveConfig\">\n            </div>\n        </div>\n        \n    </div>\n    <div class=\"row\" style=\"margin-top:1%;margin-left:5px\">\n        <input type=\"button\" class=\"e-btn\" id=\"setdefaultrowcount\" value=\"Set Default Rowcount\" />\n        <input type=\"button\" class=\"e-btn\" id=\"loadactualrwcnt\" value=\"Load Actual Rowcount\" />\n        <label>RowCount:</label><input type=\"number\" id=\"noofrows2gnrte\" value=100 style=\"width:163px\" />\n        <label>Delimiter:</label><input type=\"text\" name=\"Delimiter\" id=\"delimter\" value=\"Comma(,)\" style=\"text-align: center;font-size: 12px;\" />\n        <input type=\"radio\" name=\"varcharnullcheck\" /><label for=\"varcharnullcheck\">Generate Null for Text Columns</label>\n        <input type=\"radio\" name=\"varcharnullcheck\" /><label for=\"varcharnullcheck\">Generate Null for >1 Text Columns</label>\n    </div>\n\n    <div class=\"row\" style=\"margin-top:10px;margin-left:0px\">\n        <div style=\"float:left;width:50%\">\n            <div id=\"Grid\"></div>\n        </div>\n        <div style=\"float:right;width:45%;margin-top:5%\">\n            <input type=\"text\" id=\"sourcepath\" value=\"C:\\Users\\vinod.janaboyana\\Desktop\\SourceFiles\" placeholder=\"Copy your directory path to generate\" style=\"margin-bottom:4%;width:90%\" /><br />\n            <input type=\"text\" id=\"destpath\" value=\"C:\\Users\\vinod.janaboyana\\Desktop\\temp\" placeholder=\"Copy your directory path to generate\" style=\"margin-bottom:4%;width:90%\" /><br />\n            Total Records: <span id=\"recordsprocessed\"></span><br />\n            Time Taken : <span id=\"timer\"></span>  <br />\n            <div style=\"float:left;width:55%;\" id=\"progressBar\"></div><br />\n            <button id=\"generatealltables\">Generate All Tables</button>\n            <button id=\"generateselecteddataalone\">Generate Selected Table</button>\n        </div>\n    </div>\n</div>\n<script type=\"text/x-jsrender\" id=\"ITableCheckboxTemplate\">\n    {{if Include}}\n        {{if RowCount==0}}\n        <input class=\"itablecheck\" type=\"checkbox\" />\n        {{else}}\n        <input class=\"itablecheck\" type=\"checkbox\" checked />\n         {{/if}}\n    {{else}}\n    <input class=\"itablecheck\" type=\"checkbox\" />\n    {{/if}}\n</script>\n<script type=\"text/x-jsrender\" id=\"DimTableCheckboxTemplate\">\n    {{if DimTable}}\n    <input class=\"dimtablecheck\" type=\"checkbox\" checked />\n    {{else}}\n    <input class=\"dimtablecheck\" type=\"checkbox\" />\n    {{/if}}\n</script>\n<script type=\"text/x-jsrender\" id=\"PerDayCheckboxTemplate\">\n    {{if PerDay}}\n    <input class=\"perdaycheck\" type=\"checkbox\" checked/>\n    <input class=\"daterangepick\" type=\"text\" value=\"{{:DateRange}}\" />\n    {{else}}\n    <input class=\"perdaycheck\" type=\"checkbox\" />\n    <input class=\"daterangepick\" type=\"text\" style=\"display:none\" />\n    {{/if}}\n</script>\n<script id=\"incl\" type=\"text/x-jsrender\">\n    @*<input class='includeall' type='checkbox' />*@ Include\n</script>\n<script type=\"text/javascript\">\n    var dbtablesdata, tablecount, currenttblname, currentdaterange, tableslist, uniqtbllist, currentselectedcolumn,columnconfiglist=[],editedtableslist=[];\n    $(function () {\n        // declaration\n        $(\"#defaultTab\").ejTab();\n        $('.daterangepick').ejDateRangePicker({ width: \"100%\" });\n        $(\"#Configuration\").ejDialog({\n            enableModal: true,\n            enableResize: true,\n            showOnInit: false,\n            height:\"93%\",\n            width: \"85%\",\n            top: \"20px\",\n            actionButtons: [\"close\", \"maximize\", \"minimize\", \"collapsible\"],\n            enableAnimation: true,\n            animation: {\n                show: {  effect: \"slide\", duration: 500   },\n                hide: {   effect: \"fade\", duration: 500  }\n            },\n            close: \"onDialogClose\",\n            containment: \"body\"\n        });\n        $(\"#FKAddTemplate\").ejDialog({\n            enableModal: true,\n            enableResize: true,\n            showOnInit: false,\n            height: \"250px\",\n            width: \"700px\",\n            actionButtons: [\"close\", \"maximize\", \"minimize\", \"collapsible\"],\n            enableAnimation: true,\n            animation: {\n                show: { effect: \"slide\", duration: 500 },\n                hide: { effect: \"fade\", duration: 500 }\n            },\n            close: \"onDialogClose\",\n            containment: \"body\"\n        }); \n        $(\"#GenerateSample\").ejDialog({\n            enableModal: true,\n            enableResize: true,\n            showOnInit: false,\n            height: \"200px\",\n            width: \"700px\",\n            actionButtons: [\"close\", \"maximize\", \"minimize\", \"collapsible\"],\n            enableAnimation: true,\n            animation: {\n                show: { effect: \"slide\", duration: 500 },\n                hide: { effect: \"fade\", duration: 500 }\n            },\n            close: \"onDialogClose\",\n            containment: \"body\"\n        });\n        $.extend({\n            distinctObj: function (obj, propertyName) {\n                var result = [];\n                $.each(obj, function (i, v) {\n                    var prop = eval(\"v.\" + propertyName);\n                    if ($.inArray(prop, result) == -1) result.push(prop);\n                });\n                return result;\n            }\n        });\n\n     \n\n    });\n    \n    $('#savefk').click(function () {\n        debugger\n        var record = {\n            Referencing_Table_Name: $('#Referencing_Table').data(\"ejDropDownList\").getValue(),\n            Referencing_Column_Name: $('#Referencing_Column').data(\"ejDropDownList\").getValue(),\n            Referenced_Table_Name: $('#Referenced_Table').data(\"ejDropDownList\").getValue(),\n            Referenced_Column_As_FK: $('#Referenced_Column').data(\"ejDropDownList\").getValue(),\n            Include:true\n        }\n        var data = $(\"#FKConfigGrid\").data(\"ejGrid\").model.dataSource;\n        var currPage = $(\"#FKConfigGrid\").data(\"ejGrid\").model.pageSettings.currentPage;\n        data.push(record);\n        var dataManager = ej.DataManager(data);\n        $('#FKConfigGrid').ejGrid(\"dataSource\", data);\n        $('#FKConfigGrid').ejGrid({ pageSettings: { currentPage: currPage } });\n        $(\"#FKAddTemplate\").ejDialog(\"close\");\n        \n    })\n\n    $('#SaveFKConfig').click(function () {\n            debugger\n        var record =JSON.stringify($(\"#FKConfigGrid\").data(\"ejGrid\").model.dataSource);\n        $.ajax({\n            type: 'POST',\n            //dataType: \"json\",\n            contentType: \"application/json;charset=utf-8\",\n            url:'/DataGenerator/SaveFKConfig',\n            data: record,\n            success: function (data) {\n\n            },\n            error: function () { }\n        })\n    })\n    \n    $('.addtoconfig').click(function () {\n        debugger\n        var empty = false;\n        var tablename=$('#tableslst').data(\"ejDropDownList\").getValue();\n        $.each($(this.closest('fieldset')).find('input'), function (i, n) {\n            if (n.value == null || n.value == \"\") { n.focus(); empty = true; return false; }\n        })\n        if (empty) return false;\n        var record; var type = currentselectedcolumn.split(',')[1];\n        var columnname = currentselectedcolumn.split(',')[0];\n        if ([\"int\", 'tinyint', 'bigint', 'smallint'].includes(type)) {\n            record = {\n                ColumnName: columnname,\n                StartAt: $('#startat').val(),\n                IncrementedBy: $('#incrementedby').val(),\n                Min: $('.min')[0].value,\n                Max: $('.max')[0].value,\n            }\n            disableElements($('#finteger'));\n        }\n        else if(type==\"decimal\"){\n            record = {\n                ColumnName: columnname,\n                DecimalPlaces: $('#decimalplaces').val(),\n                Min: $('.min')[0].value,\n                Max: $('.max')[0].value,\n            }\n            disableElements($('#fdecimal'));\n        }\n        else if (type == \"datetime\") {\n            record = {\n                ColumnName: columnname,\n                MinDate: $('#mindate').val(),\n                MaxDate: $('#maxdate').val()\n            }\n            disableElements($('#fdate'));\n        }\n        var find = $(columnconfiglist).filter(function (i, n) { return n.TableName == tablename }).get(0);\n        if (find == null) columnconfiglist.push({ TableName: tablename, Columns: [record] });\n        else{\n            var index = find.Columns.findIndex((obj => obj.ColumnName == columnname));\n            if (index > -1) find.Columns[index] = record;\n             else find.Columns.push(record);\n         }\n        $('#noofcolumnsconfiguration').val($(columnconfiglist).filter(function (i, n) { return n.TableName == tablename }).get(0).Columns.length + \" columns configured for \" + $('#tableslst').data(\"ejDropDownList\").getValue());\n        $('#columnslist').find('#' + columnname).append('<span style=\"color:orangered\"> Edited</span>')\n    })\n    $('#savecolumnconfig').click(function () {\n        debugger\n        var tablename = $('#tableslst').data(\"ejDropDownList\").getValue();\n        var columns=JSON.stringify($(columnconfiglist).filter(function (i, n) { return n.TableName == tablename }).get(0));\n        $.ajax({\n            type: 'POST',\n            //dataType: \"json\",\n            contentType: \"application/json;charset=utf-8\",\n            url: '/DataGenerator/SaveColumnConfig?TableName='+tablename,\n            data: columns,\n            success: function (data) {\n                editedtableslist.push(tablename);\n                $('#tableslst_popup').find(\"[data-value='\" + tablename + \"']\").append('<span style=\"color:orangered\"> Edited</span>')\n                $('#savecolumnconfig').after('Configuration for '+tablename+\" is saved!!\");\n            },\n            error: function () { }\n        })\n    })\n\n    $('#testcon').click(function () {\n        debugger\n        $('.loader').show();\n        $.post('/DataGenerator/SQLConnectionCheck',{constr:$('#constr').val()}, function (data) {\n            $('.loader').hide();\n            if (data){\n                $('.errortooltip').hide();\n                $('#constr').css('border', '2px solid green');\n            }\n            else\n            {\n                $('.errortooltip').css('display', 'inline-block');\n                $('#constr').css('border', '2px solid red');\n            }\n        })\n    })\n    $('#loadtables').click(function () {\n        $('.loader').show();\n        $.post('/DataGenerator/GetTablesFromSQL', { constr: $('#constr').val() }, function (data) {\n            debugger; tables = [];\n            dbtablesdata = data;\n            data = $.distinctObj(data, 'TableName');\n            tablecount = data.length;\n            $.each(data, function (i, n) {\n                tables.push({ \"TableName\": n, \"RowCount\": $('#noofrows2gnrte').val(),\"Include\":true,\"DimTable\":false }) \n            });\n            $('.loader').show();\n            if (data) {\n                $(\"#Grid\").ejGrid({\n                    dataSource: tables,\n                    allowPaging: true,\n                    editSettings: { allowEditing: true},\n                    columns: [\n                        { field: \"TableName\", headerText: 'TableName', width: 200,isPrimaryKey: true },\n                        { field: \"RowCount\", headerText: 'Row Count', editType: \"stringedit\", width: 100 },\n                        { field: \"Include\", editType: \"booleanedit\", template: \"#ITableCheckboxTemplate\", width: 60 },\n                       { field: \"DimTable\", editType: \"booleanedit\", template: \"#DimTableCheckboxTemplate\", width: 70 }\n                    ],\n                    load: function (args) {\n                        for (var i = 0 ; i < this.model.columns.length; i++) {\n                            debugger\n                            if (this.model.columns[i].headerText == \"Include\") {\n                                this.model.columns[i].headerTemplateID = \"#incl\";\n                            }\n                        }\n                    },\n                    pageSettings: { pageSize: 8 },\n                });\n            }\n            else alert('Failed!!');\n\n            $('.loader').hide();\n        })\n    })\n    $('#Continue').click(function () {\n     debugger\n     $(\"#Configuration\").ejDialog(\"close\");\n       $('.loader').show();\n       if (uniqtbllist == null) {\n           $.get('/DataGenerator/GetAllTablesColumns/', { constr: $('#constr').val() }, function (data) {\n               debugger; tableslist = data;\n               uniqtbllist = $.distinctObj(data, 'TableName');\n               $('#tableslst').ejDropDownList({\n                   dataSource: uniqtbllist,\n                   watermarkText: \"Select a Table\",\n                   change: \"tableonChange\",\n                   width: '100%',\n                   watermarkText: \"Select Table\",\n               });\n               $('#tableslst').show();\n               $('.loader').hide();\n           })\n       }\n       else {\n           $('#tableslst').ejDropDownList({\n               dataSource: uniqtbllist,\n               watermarkText: \"Select a Table\",\n               change: \"tableonChange\",\n               width: '100%',\n               watermarkText: \"Select Table\",\n           });\n           $('#tableslst').show();\n           $('.loader').hide();\n       }\n       debugger\n       var tables = $($(\"#TableConfigGrid\").data(\"ejGrid\").model.dataSource).filter(function (i, n) { return n.Include==true}).get();\n       tablecount = tables.length;\n       $(\"#Grid\").ejGrid({\n           dataSource: tables,\n           allowPaging: true,\n           columns: [\n                    { field: \"TableName\", headerText: 'TableName', width: 200, isPrimaryKey: true },\n                    { field: \"RowCount\", headerText: 'Row Count', editType: \"stringedit\", width: 100 },\n                   { field: \"DimTable\", editType: \"booleanedit\", template: \"#DimTableCheckboxTemplate\", width: 70 },\n                    { field: \"PerDay\", editType: \"booleanedit\", template: \"#PerDayCheckboxTemplate\", width: 140 }\n           ],\n           pageSettings: { pageSize: 8 },\n       });\n\n      \n    })\n    function tableonChange(args) {\n        debugger\n        $('.loader').show();\n        $('label[for=column]').show();\n        $('#columnslist').html('');\n        var columnslist = tableslist.filter(function (i, n) { return i.TableName === args.value });\n        var find = $(columnconfiglist).filter(function (i, n) { return n.TableName == args.value }).get(0);\n        $.each(columnslist, function (i, n) {\n            debugger\n            if (find != null) {\n                if (find.Columns.findIndex((obj => obj.ColumnName == n.ColumnName))>-1)\n                    $('#columnslist').append('<li id=\"' + n.ColumnName + '\" class=\"' + n.DataType + '\"> ' + n.ColumnName + '<span style=\"color:orangered\">Edited</span></li>');\n                else\n                    $('#columnslist').append('<li id=\"' + n.ColumnName + '\" class=\"' + n.DataType + '\"> ' + n.ColumnName + '</li>');\n            }\n            else\n                $('#columnslist').append('<li id=\"' + n.ColumnName + '\" class=\"' + n.DataType + '\"> ' + n.ColumnName + '</li>');\n         \n        })\n        $('.loader').hide();\n    }\n    $('#columnslist').on('click', 'li', function () {\n        debugger; var fcolumn;\n        $('#columnconfigsection').find('input').val('');\n        var type = $(this)[0].classList[0]; var columnname = this.id;\n        var tablename = $('#tableslst').data(\"ejDropDownList\").model.itemValue;\n        currentselectedcolumn = columnname + ',' + type;\n        var find = $(columnconfiglist).filter(function (i, n) { return n.TableName == tablename }).get(0); \n        if (find != null) {\n            fcolumn = $(find.Columns).filter(function (i, n) { return n.ColumnName == columnname }).get(0);\n         }\n        $('#stype').html(type);\n        switch (type) {\n            case 'smallint':\n            case 'int':\n            case 'bigint':\n            case 'tinyint':\n                enableElements($('#finteger'));\n                disableElements($('#fdecimal'));\n                disableElements($('#fdate'));\n                if (fcolumn != null) {\n                    $('#startat').val(fcolumn.StartAt);\n                    $('#incrementedby').val(fcolumn.IncrementedBy);\n                    $('.min')[0].value = fcolumn.Min;\n                    $('.max')[0].value = fcolumn.Max;\n                }\n                break;\n            case 'datetime':\n                disableElements($('#finteger'));\n                disableElements($('#fdecimal'));\n                enableElements($('#fdate'));\n                if (fcolumn != null) {\n                    $('#mindate').val(fcolumn.MinDate);\n                    $('#maxdate').val(fcolumn.MaxDate);\n                }\n                break;\n            case 'decimal':\n                disableElements($('#finteger'));\n                enableElements($('#fdecimal'));\n                disableElements($('#fdate'));\n                if (fcolumn != null) {\n                    $('#decimalplaces').val(fcolumn.DecimalPlaces);\n                    $('.min')[0].value = fcolumn.Min;\n                    $('.max')[0].value = fcolumn.Max;\n                }\n                break;\n            default:\n                disableElements($('#finteger'));\n                disableElements($('#fdecimal'));\n                disableElements($('#fdate'));\n                break;\n        }\n       \n    })\n    $('body').on('click', '.e-daterangewidget ', function () {\n        debugger;\n        if (this.closest('tr').classList.contains('e-hover')) currenttblname = this.closest('tr').cells[0].textContent;\n        else currenttblname = this.closest('tr').cells[0].children[0].value;\n        currentdaterangeele = $(this).find('.daterangepick ').get(0)\n    })\n    $('body').on('click', '.e-drp-apply ', function () {\n        debugger;\n        var data = $(\"#TableConfigGrid\").data(\"ejGrid\").model.dataSource;\n        objIndex = data.findIndex((obj => obj.TableName == currenttblname));\n        //daterangeobject = $(currentdaterangeele).data(\"ejDateRangePicker\");\n        data[objIndex].DateRange = currentdaterangeele.value;\n        data[objIndex].PerDay =true;\n    })\n    \n    $('#configure').click(function () {\n        $('.loader').show();\n        $.get('/DataGenerator/GetTablesinfo', { constr: $('#constr').val() }, function (data) {\n            $('#rowcount').html(data.count);\n            tables = [];\n            var dbtablesdata = data.tables;\n            $.each(dbtablesdata, function (i, n) {\n                tables.push({ \"TableName\": n.TableName, \"RowCount\": n.RowCount, \"Include\": true, \"DimTable\": true, \"PerDay\": false,\"DateRange\":null })\n            });\n            $(\"#TableConfigGrid\").ejGrid({\n                dataSource: tables,\n                allowPaging: true,\n                allowScrolling: true,\n                toolbarSettings: { showToolbar: true, toolbarItems: [\"search\"] },\n                allowSearching: true,\n                editSettings: { allowEditing: true },\n                columns: [\n                    { field: \"TableName\", headerText: 'TableName', width: 200, isPrimaryKey: true },\n                    { field: \"RowCount\", headerText: 'Row Count', editType: \"stringedit\", width: 100 },\n                    { field: \"Include\", editType: \"booleanedit\", template: \"#ITableCheckboxTemplate\", width: 60 },\n                   { field: \"DimTable\", editType: \"booleanedit\", template: \"#DimTableCheckboxTemplate\", width: 70 },\n                    { field: \"PerDay\", editType: \"booleanedit\", template: \"#PerDayCheckboxTemplate\", width: 90 }\n                ],\n                pageSettings: { pageSize: 8 },\n            });\n            $('.loader').hide();\n            $(\"#Configuration\").ejDialog(\"open\");\n        });\n        //$(\"#FKConfigGrid\").html('');\n        //$(\"#FKConfigGrid\").outerHTML='<div id=\"FKConfigGrid\"></div>';\n        \n    })\n    $('#fetchfromsource').click(function () {\n        $.get('/DataGenerator/FetchFKPKData/', { constr: $('#constr').val() }, function (data) {\n            $(\"#FKConfigGrid\").ejGrid({\n                dataSource: data,\n                allowPaging: true,\n                allowScrolling: true,\n                //editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true },\n                //toolbarSettings: { showToolbar: true, toolbarItems: [ej.Grid.ToolBarItems.Add, ej.Grid.ToolBarItems.Edit, ej.Grid.ToolBarItems.Delete, ej.Grid.ToolBarItems.Update, ej.Grid.ToolBarItems.Cancel] },\n                toolbarClick: \"toolClick\",\n                columns: [\n                    { field: \"Referencing_Table_Name\", editType: ej.Grid.EditingType.Dropdown, headerText: 'Referencing Table', isPrimaryKey: true },\n                    { field: \"Referencing_Column_Name\", editType: ej.Grid.EditingType.Dropdown, headerText: 'Referencing Column' },\n                    { field: \"Referenced_Table_Name\", editType: ej.Grid.EditingType.Dropdown, headerText: 'Referenced Table' },\n                    { field: \"Referenced_Column_As_FK\", editType: ej.Grid.EditingType.Dropdown, headerText: \"Referenced Column FK\" },\n                    { field: \"Include\", editType: \"booleanedit\" },\n                     {\n                     headerText: \"Actions\",\n                     commands: [\n                         {\n                             type: \"Delete\",\n                             buttonOptions: {\n                                 text: \"Delete\",\n                                 cssClass: 'e-primary',\n                                 click: \"DeleteFk\"\n                             }\n                         }],\n                     textAlign: ej.TextAlign.Center,\n                     width: 100\n                    }],\n                pageSettings: { pageSize: 5 },\n            });\n        })\n\n    })\n    function DeleteFk(args) {\n        debugger\n    }\n    $('body').on('click', '.perdaycheck,#TableConfigGridPerDay', function () {\n        debugger\n       \n        if (this.checked) {\n            if (this.id == \"TableConfigGridPerDay\") {\n                $(this).after(\"<input class='daterangepick' type='text'/>\");\n                $(this.parentNode.children[1]).ejDateRangePicker({ width: \"100%\" });\n            }\n            else {\n                $(this.parentNode.children[1]).show();\n                if (this.parentNode.children[1].nodeName == \"INPUT\") $(this.parentNode.children[1]).ejDateRangePicker({ width: \"100%\" });\n            }\n        }\n        else {\n            $(this.parentNode.children[1]).hide();\n            var data = $(\"#TableConfigGrid\").data(\"ejGrid\").model.dataSource;\n            data[objIndex].DateRange = null;\n            data[objIndex].PerDay = false;\n        }\n        \n       \n    })\n    $('#manual').click(function () {\n        $.get('/DataGenerator/GetAllTablesColumns/', { constr: $('#constr').val() }, function (data) {\n            debugger; tableslist =data;\n            uniqtbllist = $.distinctObj(data, 'TableName');\n            $('#Referencing_Table').ejDropDownList({\n                dataSource: uniqtbllist,\n                fields: { value: \"TableName\", text: \"TableName\" },\n                change: \"onReferencingtblChange\",\n                width: \"100%\"\n            });\n            $('#Referencing_Column').ejDropDownList({\n                dataSource: tableslist.filter(function (i, n) { return i != $('#Referencing_Table').data(\"ejDropDownList\").getValue() }),\n                fields: { value: \"ColumnName\", text: \"ColumnName\" },\n                width: \"100%\"\n            });\n            $('#Referenced_Table').ejDropDownList({\n                dataSource: uniqtbllist,\n                fields: { value: \"TableName\", text: \"TableName\" },\n                change: \"onReferencedtblChange\",\n                width: \"100%\"\n            });\n            $('#Referenced_Column').ejDropDownList({\n                dataSource: tableslist.filter(function (i, n) { return i != $('#Referencing_Table').data(\"ejDropDownList\").getValue() }),\n                fields: { value: \"ColumnName\", text: \"ColumnName\" },\n                width: \"100%\"\n            });\n            \n        })\n        $(\"#FKAddTemplate\").ejDialog(\"open\")\n    })\n    function onReferencingtblChange() {\n        debugger\n        var rclmn = $('#Referencing_Column').data(\"ejDropDownList\");\n        $(\"#Referencing_Column\").ejDropDownList(\"option\", \"dataSource\", tableslist.filter(function (i, n) { return i.TableName == $('#Referencing_Table').data(\"ejDropDownList\").getValue() }));\n        $(\"#Referenced_Table\").ejDropDownList(\"option\", \"dataSource\", uniqtbllist.filter(function (i, n) { return i != $('#Referencing_Table').data(\"ejDropDownList\").getValue() }));\n        rclmn.element.val(\"\");\n    }\n   function onReferencedtblChange() {\n       debugger\n       $(\"#Referenced_Column\").ejDropDownList(\"option\", \"dataSource\", tableslist.filter(function (i, n) { return i.TableName == $('#Referenced_Table').data(\"ejDropDownList\").getValue() }));\n        var rclmn = $('#Referenced_Column').data(\"ejDropDownList\");\n        rclmn.element.val(\"\");\n\n    }\n\n    function disableElements(el) {\n        for (var i = 0; i < el.length; i++) {\n            el[i].disabled = true;\n            disableElements(el[i].children);\n        }\n    }\n    function enableElements(el) {\n        for (var i = 0; i < el.length; i++) {\n            el[i].disabled = false;\n            enableElements(el[i].children);\n        }\n    }\n</script>\n\n<script>\n    var timer2 = \"0:0\";\n    $(function () {\n\n        $(\"#generatealltables\").click(function () {\n            debugger\n            timer2 = \"0:0\";\n            $('#recordsprocessed').html(\"\");\n            var progresObj = $(\"#progressBar\").data(\"ejProgressBar\");\n            progresObj.option(\"text\",0 + \"%\");\n            progresObj.option(\"percentage\", 0);\n            var timetaken = setInterval(calculatetime, 1000);\n            $.post('/DataGenerator/Generate', { constr: $('#constr').val(), tables: $(\"#Grid\").data(\"ejGrid\").model.dataSource, destPath: $('#destpath').val(), sourcePath: $('#sourcepath').val() }, function (data) {\n                    clearInterval(timetaken);\n                })\n        })\n        function getstatus() {\n            $.get('/DataGenerator/GetGenerationStatus', function (status) {\n                debugger\n                if (!status.Run) return;\n                if (status.Percentage == 100) $('#recordsprocessed').html(\"Data Generation Completed!!\");\n                else $('#recordsprocessed').html(\"(\" + status.Records + \") \" + status.TableName);\n                var progresObj = $(\"#progressBar\").data(\"ejProgressBar\");\n                progresObj.option(\"text\", status.Percentage + \"%\");\n                progresObj.option(\"percentage\", status.Percentage);\n\n            })\n        };\n        function calculatetime() {\n            var timer = timer2.split(':');\n            var minutes = parseInt(timer[0]);\n            var seconds = parseInt(timer[1]);\n            ++seconds;\n            minutes = (seconds == 60) ? ++minutes : minutes;\n            seconds = (seconds == 60) ? 00 : seconds;\n            minutes = (minutes < 10) ? '0' + minutes : minutes;\n            seconds = (seconds < 10) ? '0' + seconds : seconds;\n            timer2 = minutes + ':' + seconds;\n            $('#timer').html(timer2);\n        };\n        \n        $(\"body\").on('click', '.itablecheck, .dimtablecheck', function () {\n            debugger\n            var tablename = this.closest('tr').cells[0].textContent;\n            var data = $(\"#TableConfigGrid\").data(\"ejGrid\").model.dataSource;\n            var currPage = $(\"#TableConfigGrid\").data(\"ejGrid\").model.pageSettings.currentPage;\n            objIndex = data.findIndex((obj => obj.TableName == tablename));\n            if ($(this)[0].className == 'itablecheck') data[objIndex].Include = $(this)[0].checked;\n            else if ($(this)[0].className == 'dimtablecheck') data[objIndex].DimTable = $(this)[0].checked;\n            var dataManager = ej.DataManager(data);\n            //$(gridele).data(\"ejGrid\").dataSource(dataManager);\n            $('#TableConfigGrid').ejGrid(\"dataSource\", data);\n            $('#TableConfigGrid').ejGrid({ pageSettings: { currentPage: currPage } });\n        })\n        \n        //var d = new Date(\"Jan 5, 2019 15:37:25\");\n        //document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n\n    })\n    //  declaration \n  \n    $(\"#generatealltables\").ejButton({\n        showRoundedCorner: true\n    });\n    $(\"#generateselecteddataalone\").ejButton({\n        showRoundedCorner: true\n    });\n    $(\"#progressBar\").ejProgressBar({ value: 0, height: \"15\" });\n</script>\n@section scripts {\n    <!--Script references. -->\n    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->\n    <!--Reference the SignalR library. -->\n    <script src=\"~/Scripts/jquery.signalR-2.3.0.min.js\"></script>\n    <!--Reference the autogenerated SignalR hub script. -->\n    <script src=\"~/signalr/hubs\"></script>\n    <!--SignalR script to update the chat page and send messages.-->\n    <script>\n        $(function () {\n            // Reference the auto-generated proxy for the hub.\n            var chat = $.connection.chatHub;\n            // Create a function that the hub can call back to display messages.\n            chat.client.addNewMessageToPage = function (name, message) {\n                // Add the message to the page.\n                $('#discussion').append('<li><strong>' + htmlEncode(name)\n                    + '</strong>: ' + htmlEncode(message) + '</li>');\n            };\n            chat.client.progress = function (data) {\n                debugger\n                var res = data.split(',');\n                var per = (res[1] * 100 / tablecount).toFixed(2);\n                if (res[1] == tablecount) {\n                    $('#recordsprocessed').html(\"Data Generation Completed!!\");\n                }\n                else $('#recordsprocessed').html(\"(\" + res[1] + \"/\" + tablecount + \") \" + res[0]);\n                var progresObj = $(\"#progressBar\").data(\"ejProgressBar\");\n                progresObj.option(\"text\", per + \"%\");\n                progresObj.option(\"percentage\", per);\n            }\n            chat.client.dimtable = function (data) {\n                debugger\n                $('</br><span>' + data+'</span>').insertAfter(\"#generateselecteddataalone\");\n            }\n            // Start the connection.\n            $.connection.hub.start().done(function () {\n                $('#sendmessage').click(function () {\n                    // Call the Send method on the hub.\n                    chat.server.send($('#displayname').val(), $('#message').val());\n                    // Clear text box and reset focus for next comment.\n                    $('#message').val('').focus();\n                });\n            });\n        });\n\n        // This optional function html-encodes messages for display in the page.\n        function htmlEncode(value) {\n            var encodedValue = $('<div />').text(value).html();\n            return encodedValue;\n        }\n    </script>\n}\n\n<script>\n    \n    $('#samplegenerate').click(function () {\n        $(\"#GenerateSample\").ejDialog(\"open\");\n    })\n    $('#generatesamplebtn').click(function () {\n        $('.loader').show();\n        $.post('/DataGenerator/GenerateTableDataSQL', { constr: $('#constr').val(), path:$('#samplegenpath').val() }, function (data) {\n            if (data == \"Not Exist\") {\n                $('.loader').hide();\n                $('#generatemsg').html('Directory Not Exist!! Give existing path.');\n                $('#generatemsg').show();\n            }\n            else if (data) {\n                $('.loader').hide();\n                $('#samplegenpath').val($('#samplegenpath').val());\n                $('#generatemsg').html('Generated');\n                $('#generatemsg').show();\n            }\n            else {\n                $('.loader').hide();\n                $('#generatemsg').html('Failed To generate');\n                $('#generatemsg').show();\n            }\n        })\n\n    })\n    \n</script>\n\n @*daterangeobject = $('#daterangepick').data(\"ejDateRangePicker\");\n\n daterangeobject.getSelectedRange().startDate);\ndaterangeobject.getSelectedRange().endDate);*@",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 28,
    "Title": "datagen cs",
    "Text": "using DataGenerator.Hubs;\nusing DataGenerator.Models;\nusing Microsoft.AspNet.SignalR;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace DataGenerator.Controllers\n{\n    public class DataGeneratorController : Controller\n    {\n        // GET: DataGenerator\n        Random rnd = new Random();\n        Stopwatch sw = new Stopwatch();\n        ConstantClass objConstantClass = new ConstantClass();\n        ColumnsListClass objColumnsListClass = new ColumnsListClass();\n        DataSet dsGeneric;\n        DataTable dtRowCount = new DataTable();\n        string strGeneratingFileName = string.Empty;\n        public List<DBTable> tableslist;\n        public string currentgeneratedtable = string.Empty;\n        public int totaltablescount =0;\n        public int currentprocessedcount =0;\n        public bool dbwaitover = false;\n        IHubContext context = GlobalHost.ConnectionManager.GetHubContext<ChatHub>();\n        public string GeneratePath;\n\n        public ActionResult Index()\n        {\n            return View();\n        }\n        public ActionResult Chat()\n        {\n            \n            return View();\n        }\n        public JsonResult SQLConnectionCheck(string constr)\n       {\n            constr=constr.Replace(\"%20\",\" \");\n            Session[\"con\"] = constr;\n           \n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n                    return Json(true, JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n        public JsonResult GetTablesinfo(string constr)\n        {\n            List<TableRowCount> tablerowcountlist = new List<TableRowCount>();\n            string tablesrowcntquery = @\"SELECT SCHEMA_NAME(schema_id)+'.'+t.name, s.row_count from sys.tables t JOIN sys.dm_db_partition_stats s ON t.object_id = s.object_id\n                                        AND t.type_desc = 'USER_TABLE' AND t.name not like '%dss%' AND s.index_id IN (0,1)\";\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n\n                    using (SqlCommand cmd = new SqlCommand(tablesrowcntquery, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                tablerowcountlist.Add(new TableRowCount() { TableName = dr[0].ToString(), RowCount =Convert.ToInt64(dr[1]) });\n                            }\n                        }\n                    }\n                    return Json(new { tables = tablerowcountlist, count = tablerowcountlist.Count }, JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n\n        }\n        public JsonResult GetTablesFromSQL(string constr)\n        {\n           tableslist = new List<DBTable>();\n            string SQLToGetColumns = @\"SELECT  CONCAT(S.name,'.',T.name) AS TableName,C.name AS ColumnName ,P.name AS DataType FROM   sys.objects AS T\n\t\t                            JOIN sys.columns AS C ON T.object_id = C.object_id JOIN sys.types AS P ON C.system_type_id = P.system_type_id\n\t\t                            LEFT OUTER JOIN  sys.index_columns ic ON ic.object_id = c.object_id AND ic.column_id = c.column_id\n\t\t\t                        LEFT OUTER JOIN sys.indexes i ON ic.object_id = i.object_id AND ic.index_id = i.index_id Join sys.schemas as S ON T.schema_id = S.schema_id\n\t\t                            WHERE  T.type_desc = 'USER_TABLE' AND P.name <>'sysname' ORDER BY T.name\";\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n\n                    using (SqlCommand cmd = new SqlCommand(SQLToGetColumns, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                tableslist.Add(new DBTable() { TableName = dr[0].ToString(),ColumnName= dr[1].ToString(),DataType= dr[2].ToString() });\n                            }\n                        }\n                    }\n                    Session[\"tablelist\"] = tableslist;\n                    return Json(tableslist, JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n\n        public  JsonResult Generate(string constr, List<EnrichedTable> tables,string destPath,string sourcePath)\n        {\n            try\n            {\n                if (!Directory.Exists(destPath))\n                {\n                    Directory.CreateDirectory(destPath);\n                }\n                GeneratePath = destPath;\n                IFormatter formatter = new BinaryFormatter();\n                Stream stream = new FileStream(Server.MapPath(\"~/Settings.txt\"), FileMode.Create, FileAccess.Write);\n                formatter.Serialize(stream, objColumnsListClass);\n                stream.Close();\n                if (Session[\"tablelist\"]==null)\n                {\n                    GetAllTablesColumns(constr);\n                }\n                tableslist = (List<DBTable>)Session[\"tablelist\"];\n                int processedcount = 0;\n                List<FKPKRelation> fkpklst = GetFKPKRelation(constr);\n                foreach (EnrichedTable table in tables)\n                {\n                    if (table.DimTable)\n                    {\n                        if (!Directory.Exists(destPath))\n                        {\n                            System.IO.Directory.CreateDirectory(destPath);\n                        }\n                        System.IO.File.Copy(sourcePath + \"\\\\\"+ table.TableName + \".csv\", destPath + \"\\\\\" + table.TableName + \".csv\", true);\n                        processedcount++;\n                        SendMessage(String.Join(\",\", new string[] { table.TableName + \".csv\", processedcount.ToString() }));\n                    }\n                    else\n                    {\n                        List<FKPKRelation> relationinfo = fkpklst.Where(x => table.TableName == x.Referencing_Table_Name).ToList();\n                        List<Column> rcolumns = GetReferencedColumn(relationinfo, sourcePath);\n                        List<string> comnslist = tableslist.Where(x => x.TableName == table.TableName).Select(p => p.ColumnName).ToList();\n                        List<string> datatypelist = tableslist.Where(x => x.TableName == table.TableName).Select(p => p.DataType).ToList();\n                        ColumnsListClass objColumnsListClassAllTables = new ColumnsListClass();\n                        objColumnsListClassAllTables.PerDay = table.PerDay;\n                        if (table.PerDay) objColumnsListClassAllTables.DateRange = table.DateRange;\n                        objColumnsListClassAllTables.RowCount = table.RowCount;// Convert.ToInt64(distinctRowCount.Rows[0][\"RowCount\"].ToString());\n                        objColumnsListClassAllTables.TableName = table.TableName.ToString();\n                        for (int i = 0; i < comnslist.Count; i++)\n                        {\n                            SaveColumnValues(objColumnsListClassAllTables, comnslist[i], datatypelist[i], false);\n                        }\n                        GenerateFile(objColumnsListClassAllTables, rcolumns);\n                        processedcount++;\n                        SendMessage(String.Join(\",\", new string[] { table.TableName + \".csv\", processedcount.ToString() }));\n                    }\n                }\n                return Json(true, JsonRequestBehavior.AllowGet);\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n        public void SendMessage(string message)\n        {\n            context.Clients.All.progress(message);\n        }\n        public void SaveColumnValues(ColumnsListClass ColumnsClassObject, string SelectedColumn, string SelectedDataType, bool isprimarykey)\n        {\n\n            // lblSelected.Visible = true;\n            if (ColumnsClassObject.ColumnsObject.Count > 0)\n            {\n                for (int i = ColumnsClassObject.ColumnsObject.Count - 1; i >= 0; i--)\n                {\n                    object item = ColumnsClassObject.ColumnsObject[i];\n                    dynamic dyn = item;\n                    if (SelectedColumn == dyn.ColumnName.ToString())\n                    {\n                        ColumnsClassObject.ColumnsObject.Remove(item);\n                    }\n                }\n            }\n            switch (SelectedDataType)\n            {\n                case \"int\":\n                case \"bit\":\n                case \"smallint\":\n                case \"tinyint\":\n                case \"bigint\":\n                    IntClass objInt = new IntClass();\n                    objInt.ColumnName = SelectedColumn;\n                    objInt.ColumnDataType = SelectedDataType;\n                    if (/*rdoIncrement.Checked == true ||*/ isprimarykey == true)\n                        objInt.IntType = \"Increment\";\n                    else\n                        objInt.IntType = \"MinMax\";\n                    objInt.StartAt = Convert.ToInt32(/*IntStartAt.Value*/0);\n                    objInt.IncrementBy = Convert.ToInt32(/*IntIncrementBy.Value*/1);\n                    objInt.Min = Convert.ToInt32(/*IntMin.Value*/1);\n                    objInt.Max = Convert.ToInt32(/*IntMax.Value*/200);\n                    ColumnsClassObject.ColumnsObject.Add(objInt);\n\n                    break;\n                case \"decimal\":\n                case \"float\":\n                case \"money\":\n                case \"numeric\":\n                    DecimalClass objDecimal = new DecimalClass();\n                    objDecimal.ColumnName = SelectedColumn;\n                    objDecimal.ColumnDataType = SelectedDataType;\n                    objDecimal.DecimalPlaces = Convert.ToInt32(/*decimalPlace.Value*/2);\n                    objDecimal.DecimalMin = Convert.ToDouble(/*decimalMin.Value*/0.00);\n                    objDecimal.DecimalMax = Convert.ToDouble(/*decimalMax.Value*/1000.00);\n                    ColumnsClassObject.ColumnsObject.Add(objDecimal);\n                    break;\n                case \"char\":\n                case \"nvarchar\":\n                case \"varchar\":\n                    TextClass objText = new TextClass();\n                    objText.ColumnName = SelectedColumn;\n                    objText.ColumnDataType = SelectedDataType;\n                    if (/*rdoFixedLength.Checked == true*/false)\n                        objText.IntType = \"FixedLength\";\n                    else\n                        objText.IntType = \"RandomLength\";\n                    objText.NoofWords = Convert.ToInt32(/*NoOfWords.Value*/10);\n                    objText.NoOfWordsFrom = Convert.ToInt32(/*NoofWordsfrom.Value*/5);\n                    objText.NoOfWordsTo = Convert.ToInt32(/*NoofWordsTo.Value*/10);\n                    ColumnsClassObject.ColumnsObject.Add(objText);\n                    break;\n                case \"datetime\":\n                case \"datetime2\":\n                case \"smalldatetime\":\n                    DateClass objDate = new DateClass();\n                    objDate.ColumnName = SelectedColumn;\n                    objDate.ColumnDataType = SelectedDataType;\n                    objDate.MinDate = DateTime.Now.AddYears(-1); /*dtMinDate.Value;*/\n                    objDate.MaxDate = DateTime.Now; /*dtMaxDate.Value;*/\n                    ColumnsClassObject.ColumnsObject.Add(objDate);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        private void GenerateFile(ColumnsListClass objColumnsListClassCurrent,List<Column> list)\n        {\n            StringBuilder buffer = new StringBuilder(5048576);\n            //strGeneratingFileName = OutputFileName;\n            string delimiter = \",\";long rowscount;int days = 1;\n            ConstantClass objConstantClass = new ConstantClass();\n\n            string colNames = string.Empty;\n\n            for (int i = 0; i <= objColumnsListClassCurrent.ColumnsObject.Count - 1; i++)\n            {\n                dynamic dynitem = objColumnsListClassCurrent.ColumnsObject[i];\n                if (i == objColumnsListClassCurrent.ColumnsObject.Count - 1)\n                    colNames = colNames + dynitem.ColumnName.ToString();\n                else\n                    colNames = colNames + dynitem.ColumnName.ToString() + delimiter;\n            }\n            if (objColumnsListClassCurrent.PerDay)\n            {\n                string[] datess=objColumnsListClassCurrent.DateRange.Split('-');\n                string[] fromdate = datess[0].Split('/'); string[] todate = datess[1].Split('/');\n                days = Convert.ToInt32((Convert.ToDateTime(datess[1].Trim()) - Convert.ToDateTime(datess[0].Trim())).TotalDays);\n                rowscount =Convert.ToInt64(objColumnsListClassCurrent.RowCount / days);\n            }\n            else\n            {\n                rowscount = objColumnsListClassCurrent.RowCount;\n            }\n          \n\n            for (int p = 1; p <=days; p++)\n            {\n                var OutputFileName = GeneratePath + \"\\\\\" + objColumnsListClassCurrent.TableName +\"_\"+p+ \"_\" + DateTime.Now.ToString(\"dd-MM-yyyy\") + \".csv\";// Path.GetDirectoryName(txtFolderPath.Text)+ OutputFileName;\n                buffer=new StringBuilder(5048576);\n                buffer.Append(colNames);\n                buffer.AppendLine();\n                for (int i = 1; i <= rowscount; i++)\n                {\n                    string RowValues = string.Empty;\n                    int varcharCount = 0;\n                    for (int j = 0; j <= objColumnsListClassCurrent.ColumnsObject.Count - 1; j++)\n                    {\n                        dynamic dynitem = objColumnsListClassCurrent.ColumnsObject[j];\n                        // ColumnValues[i] = GenerateValues(dynitem,j-1);\n                        //                    dynamic dynitem = objColumnsListClass.ColumnsObject[j];\n                        //strValues = objConstantClass.MaleNames[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n                        string strValues = string.Empty;\n                        Column c = list.Where(x => x.ColumnName == dynitem.ColumnName).FirstOrDefault();\n                        if (c != null)\n                        {\n                            strValues = c.ColumnData[(rnd.Next(0, c.ColumnData.Count))].ToString();\n                        }\n                        else\n                        {\n                            if (/*chkMakeNULLforExcept1TextValue.Checked ==*/ true && (dynitem.ColumnDataType == \"char\" || dynitem.ColumnDataType == \"nvarchar\" || dynitem.ColumnDataType == \"varchar\"))\n                            {\n                                //if (dynitem.ColumnDataType == \"char\" || dynitem.ColumnDataType == \"nvarchar\" || dynitem.ColumnDataType == \"varchar\")\n                                //{\n                                varcharCount += 1;\n                                if (varcharCount == 2)\n                                {\n                                    strValues = \"\";\n                                    varcharCount = 1;\n                                }\n                                else\n                                {\n                                    strValues = GenerateValues(dynitem, i);\n                                }\n                            }\n\n                            else\n                            {\n                                strValues = GenerateValues(dynitem, i);\n                            }\n\n                        }\n                        if (j == objColumnsListClassCurrent.ColumnsObject.Count - 1)\n                        {\n                            RowValues = RowValues + strValues;\n                        }\n                        else\n                        {\n                            RowValues = RowValues + strValues + delimiter;\n                        }\n                        strValues = \"\";\n\n                    }\n                    // OutputFileName = @\"D:\\Unity\\\" + objColumnsListClassCurrent.TableName + \"_\" + DateTime.Now.ToString(\"dd-MM-yyyy\") + \".csv\";// Path.GetDirectoryName(txtFolderPath.Text)+ OutputFileName;\n\n                    // OutputStreamWriter.WriteToFile(OutputFileName, RowValues);\n                    buffer.Append(RowValues);\n                    if (buffer.Length > 5048576 - 1024)\n                    {\n                        // buffer.Remove((buffer.Length - 1), 1);\n                        System.IO.File.WriteAllText(OutputFileName, buffer.ToString());\n                        buffer.Length = 0;\n                    }\n                    if (i == rowscount)\n                    {\n                        // buffer.Remove((buffer.Length - 1), 1);\n                        System.IO.File.WriteAllText(OutputFileName, buffer.ToString());\n                    }\n                    else\n                    {\n                        buffer.AppendLine();\n                    }\n                    RowValues = \"\";\n\n                }\n            }\n            \n        }\n        public string GenerateValues(dynamic ColumnsClassObject, int lastIncrementVal)\n        {\n\n            string outputValue = string.Empty;\n            dynamic dyn = ColumnsClassObject;\n            string ColumnDataType = dyn.ColumnDataType.ToString();\n            switch (ColumnDataType)\n            {\n                case \"int\":\n                case \"bit\":\n                case \"smallint\":\n                case \"tinyint\":\n                case \"bigint\":\n                    if (dyn.IntType == \"Increment\")\n                    {\n                        lastIncrementVal = (lastIncrementVal - 1) * dyn.IncrementBy;\n                        lastIncrementVal += dyn.IncrementBy;\n                        outputValue = Convert.ToString(lastIncrementVal);\n                    }\n                    else\n                    {\n                        outputValue = Convert.ToString(CommonFunctionClass.GetRandomNumber(dyn.Min, dyn.Max));\n                    }\n\n                    break;\n                case \"decimal\":\n                case \"float\":\n                case \"money\":\n                case \"numeric\":\n                    outputValue = Convert.ToString(CommonFunctionClass.GetRandomDecimalNumber(dyn.DecimalMin, dyn.DecimalMax, dyn.DecimalPlaces));\n                    break;\n                case \"char\":\n                case \"nvarchar\":\n                case \"varchar\":\n\n                    if (/*chkNullVarcharValues.Checked == true*/false)\n                    {\n                        outputValue = \"\";\n                    }\n                    else\n                    {\n                        string output = string.Empty;\n                        string randomString = string.Empty;\n                        if (dyn.IntType == \"FixedLength\" && dyn.NoofWords != 0)\n                        {\n                            for (int i = 0; i < dyn.NoofWords; i++)\n                            {\n                                //if (i % 2 == 0)\n                                //{\n                                //    Random rnd = new Random();\n                                //    int size = rnd.Next(0, objConstantClass.BusinessKeyWords.Length);\n                                //    //randomString = CommonFunctionClass.RandomString(size);\n                                //    //randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n\n                                //    randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[size];\n                                //}\n                                //else\n                                //{\n                                //    randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n                                //}\n                                //string randomString = objConstantClass.BusinessKeyWords[Random.Range(0, objConstantClass.BusinessKeyWords.Length)];\n                                Random rnd1 = new Random();\n                                int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                                // string random = objConstantClass.BusinessKeyWords[r].ToString();\n                                randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[r];\n                                output = output + randomString + \" \";\n                            }\n                            outputValue = output.Trim();\n                            // outputValue = CommonFunctionClass.RandomText(dyn.ColumnName.ToString(), true, dyn.NoofWords, 0, 0,false);\n                        }\n                        else if (dyn.IntType == \"RandomLength\" && dyn.NoofWords != 0)\n                        {\n                            //Random rnd = new Random();\n                            //int size = rnd.Next(dyn.NoOfWordsFrom, dyn.NoOfWordsTo + 1);\n                            //string output = string.Empty;\n                            //for (int i = 0; i < size; i++)\n                            //{\n                            //    string randomString = objConstantClass.BusinessKeyWords[new Random().Next(0, objConstantClass.BusinessKeyWords.Length)];\n                            //    //Random rnd1 = new Random();\n                            //    //int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                            //    //string randomString = objConstantClass.BusinessKeyWords[r].ToString();\n                            //    output = output + randomString + \" \";\n                            //}\n                            //outputValue = output.Trim();\n\n                            Random rnd1 = new Random();\n                            int r = rnd1.Next(objConstantClass.BusinessKeyWords.Length);\n                            // string random = objConstantClass.BusinessKeyWords[r].ToString();\n                            randomString = CommonFunctionClass.RandomizeStrings(objConstantClass.BusinessKeyWords)[r];\n                            output = output + randomString + \" \";\n                            outputValue = output;\n                            //outputValue = CommonFunctionClass.RandomText(dyn.ColumnName.ToString(), false, 0, dyn.NoOfWordsFrom, dyn.NoOfWordsTo, false);\n                        }\n                        else\n                        {\n                            outputValue = \"\";\n                        }\n                    }\n                    break;\n                case \"datetime\":\n                case \"datetime2\":\n                case \"smalldatetime\":\n                    outputValue = Convert.ToString(CommonFunctionClass.GetRandomDate(dyn.MinDate, dyn.MaxDate));\n                    break;\n                default:\n                    break;\n            }\n\n            return outputValue;\n\n        }\n\n        public JsonResult GetGenerationStatus(string message)\n        {\n            for (int i = 0; i < 100; i++)\n            {\n                SendMessage(message+\"_\"+i);\n            }\n            return Json(new { Run = false }, JsonRequestBehavior.AllowGet);\n\n\n            //if ((bool)Session[\"dbwaitover\"])\n            //{\n            //    int totaltablescount = (int)Session[\"totaltablescount\"];\n            //    int currentprocessedcount = (int)Session[\"currentprocessedcount\"];\n            //    string currentgeneratedtable = (string)Session[\"currentgeneratedtable\"];\n            //    return Json(new { Run = true, TableName = currentgeneratedtable, Records = currentprocessedcount + \"/\" + totaltablescount, Percentage = currentprocessedcount * 100 / totaltablescount }, JsonRequestBehavior.AllowGet);\n            //}\n            //else\n            //    return Json(new { Run = false }, JsonRequestBehavior.AllowGet);\n\n        }\n\n        public JsonResult FetchFKPKData(string constr)\n        {\n            List<FKPKRelation> data=GetFKPKRelation(constr);\n            return Json(data,JsonRequestBehavior.AllowGet);\n        }\n\n        public List<FKPKRelation> GetFKPKRelation(string constr)\n        {\n            List<FKPKRelation> fkpktableslist = new List<FKPKRelation>();\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n\n                    string query = System.IO.File.ReadAllText(Server.MapPath(\"~/fetchingfk.txt\"));\n                    using (SqlCommand cmd = new SqlCommand(query, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                fkpktableslist.Add(new FKPKRelation() {\n                                    Referencing_Table_Name = dr[0].ToString(), Referencing_Column_Name = dr[1].ToString(), Referenced_Table_Name = dr[2].ToString(),Referenced_Column_As_FK=dr[3].ToString()\n                                });\n                            }\n                        }\n                    }\n                    return fkpktableslist;\n                }\n            }\n            catch (Exception ex)\n            {\n                return fkpktableslist;\n            }\n        }\n        public string CsvToJson(string[] lines)\n        {\n            // Get lines.\n            if (lines.Length < 2) throw new InvalidDataException(\"Must have header line.\");\n            // Get headers.\n            string[] headers = lines.First().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\n          \n            StringBuilder sb = new StringBuilder();\n            sb.AppendLine(\"[\");\n            for (int i = 1; i < lines.Length; i++)\n            {\n                var fields = lines[i].Split(',');\n                if (fields.Length != headers.Length) throw new InvalidDataException(\"Field count must match header count. at line \" + i);\n                var jsonElements = headers.Zip(fields, (header, field) => string.Format(\"{0}: {1}\", '\"' + header + '\"', IsNumeric(field) ? field : '\"' + field + '\"')).ToArray();\n                string jsonObject = \"{\" + string.Format(\"{0}\", string.Join(\",\", jsonElements)) + \"}\";\n                if (i < lines.Length - 1)\n                    jsonObject += \",\";\n                sb.AppendLine(jsonObject);\n            }\n            sb.AppendLine(\"]\");\n            return sb.Replace(\"\\r\\n\", \"\").ToString();\n        }\n        static readonly Regex _isNumericRegex = new Regex(\"^(\" +\n                /*Hex*/ @\"0x[0-9a-f]+\" + \"|\" +\n                /*Bin*/ @\"0b[01]+\" + \"|\" +\n                /*Oct*/ @\"0[0-7]*\" + \"|\" +\n                /*Dec*/ @\"((?!0)|[-+]|(?=0+\\.))(\\d*\\.)?\\d+(e\\d+)?\" +\n                \")$\");\n        static bool IsNumeric(string value)\n        {\n            return _isNumericRegex.IsMatch(value);\n        }\n\n\n        public List<Column> GetReferencedColumn( List<FKPKRelation> relationinfo,string sourcePath)\n        {\n            List<Column> columns = new List<Column>();\n            foreach (FKPKRelation r in relationinfo)\n                columns.Add(new Column() { ColumnName = r.Referencing_Column_Name });\n            int z = 0;\n            foreach (string ptable in relationinfo.Select(x => x.Referenced_Table_Name))\n            {\n                if (columns.Count > z)\n                {\n                    if(System.IO.File.Exists(sourcePath + \"\\\\\" + ptable + \".csv\"))\n                    {\n                        string[] lines = System.IO.File.ReadAllLines(sourcePath+\"\\\\\" + ptable + \".csv\");\n                        List<string> fkcs = relationinfo.Where(x => x.Referenced_Table_Name == ptable).Select(p => p.Referenced_Column_As_FK).ToList();\n                        List<string> header = lines[0].Split(',').ToList();\n                        int[] indexes = header.Where((s, i) => fkcs.Contains(s)).Select((s, i) => header.IndexOf(s)).ToArray();\n\n                        for (int i = 1; i < lines.Length; i++)\n                        {\n                            string[] line = lines[i].Split(',');\n                            int n = 0;\n                            foreach (int ind in indexes)\n                            {\n                                columns[z + n].ColumnData.Add(line[ind]);\n                                n++;\n                            }\n                        }\n                        if (indexes.Length > 1) z = z + indexes.Length;\n                        else z++;\n                    }\n                    else\n                    {\n                        z++;\n                    }\n                  \n                }\n               \n            }\n            return columns;\n        }\n\n        public JsonResult GetAllTablesColumns(string constr)\n        {\n            List<DBTable> tables = new List<DBTable>();\n            string query = @\"SELECT TableName = c.table_schema+'.'+c.table_name,ColumnName = c.column_name, DataType = data_type FROM information_schema.columns c\n            INNER JOIN information_schema.tables t ON c.table_name = t.table_name AND c.table_schema = t.table_schema AND t.table_type = 'BASE TABLE' ORDER BY TableName\";\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n                    using (SqlCommand cmd = new SqlCommand(query, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                tables.Add(new DBTable()\n                                {\n                                    TableName = dr[0].ToString(),\n                                    ColumnName = dr[1].ToString(),\n                                    DataType = dr[2].ToString(),\n                                });\n                            }\n                        }\n                    }\n                    Session[\"tablelist\"] = tables;\n                    return Json(tables,JsonRequestBehavior.AllowGet);\n                }\n            }\n            catch (Exception ex)\n            {\n                return Json(ex.InnerException.Message+\"\\n\"+ex.Message,JsonRequestBehavior.AllowGet);\n            }\n        }\n\n        public JsonResult GenerateTableDataSQL(string constr,string path)\n        {\n            if (!Directory.Exists(path)) return Json(\"Not Exist\");\n            string query =\"SELECT TOP(1000) * FROM [\";\n            List<string>  tables = new List<string>();\n            string current;\n            try\n            {\n                using (SqlConnection con = new SqlConnection(constr))\n                {\n                    con.Open();\n                    string listquery = \"SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n                    using (SqlCommand cmd = new SqlCommand(listquery, con))\n                    {\n                        using (SqlDataReader dr = cmd.ExecuteReader())\n                        {\n                            while (dr.Read())\n                            {\n                                tables.Add(dr[0].ToString());\n                            }\n                        }\n                    }\n                    foreach (string table in tables)\n                    {\n                        var temp = new DataTable();\n                        using (var da = new SqlDataAdapter(query + table.Replace(\".\", \"].[\") + \"]\", con))\n                        {\n                            da.Fill(temp);\n                        }\n                        WritetoCSV(temp, table, path+\"\\\\\"+table+\".csv\");\n                        current = table;\n                    }\n                }\n                return Json(true);\n            }\n            catch (Exception ex)\n            {\n                return Json(false, JsonRequestBehavior.AllowGet);\n            }\n        }\n\n        public JsonResult SaveFKConfig(List<FKPKRelation> table)\n        {\n            try\n            {\n                string savingpath = Server.MapPath(\"~/Content/SaveConfiguration/FKConfig/FKConfig.json\");\n                string json = JsonConvert.SerializeObject(table);\n                System.IO.File.WriteAllText(savingpath, json);\n                return Json(true);\n            }\n            catch (Exception ex)\n            {\n                return Json(false);\n            }\n        }\n        public JsonResult SaveColumnConfig(List<ColumnConfig> columns,string TableName)\n        {\n            List<TableColumnConfig> tables = new List<TableColumnConfig>();\n            try\n            {\n                TableColumnConfig tmp = new TableColumnConfig();\n                tmp.TableName = TableName;\n                tmp.Columns.AddRange(columns);\n                tables.Add(tmp);\n                string savingpath = Server.MapPath(\"~/Content/SaveConfiguration/Columnconfig/Columnconfig.json\");\n                string json = JsonConvert.SerializeObject(tables);\n                System.IO.File.WriteAllText(savingpath, json);\n                return Json(true);\n            }\n            catch (Exception ex)\n            {\n                return Json(false);\n            }\n        }\n\n\n        public bool WritetoCSV(DataTable datatable, string table, string path)\n        {\n\n            try\n            {\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < datatable.Columns.Count; i++)\n                {\n                    sb.Append(datatable.Columns[i]);\n                    if (i < datatable.Columns.Count - 1)\n                        sb.Append(',');\n                }\n                sb.AppendLine();\n                foreach (DataRow dr in datatable.Rows)\n                {\n                    for (int i = 0; i < datatable.Columns.Count; i++)\n                    {\n                        sb.Append(dr[i].ToString().Replace(Environment.NewLine, \" \"));\n\n                        if (i < datatable.Columns.Count - 1)\n                            sb.Append(\",\");\n                    }\n                    sb.AppendLine();\n                }\n                bool exists = System.IO.File.Exists(path);\n                if (!exists) System.IO.Directory.CreateDirectory(Path.GetDirectoryName(path));\n                System.IO.File.WriteAllText(path, sb.ToString());\n                return true;\n            }\n            catch (Exception ex)\n            {\n                return false;\n            }\n        }\n    }\n}",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  },
  {
    "StickyId": 29,
    "Title": "resume jquery fn",
    "Text": "            $(\"#generateerror\").html(\"\");\n            var progresObj = $(\"#progressBar\").data(\"ejProgressBar\");\n            var timetaken = setInterval(calculatetime, 1000);\n            $.post('/DataGenerator/Generate',\n                {Resume:true, ConfigName: $('#ConfigName').val(), constr: $('#constr').val(), tables: $(\"#Grid\").data(\"ejGrid\").model.dataSource, destPath: $('#destpath').val(), sourcePath: $('#sourcepath').val() }, function (data) {\n                    if (data == \"Not Exist\") { $(\"#generateerror\").html(\"Path Doesn't exist please give existing path!!\"); }\n                clearInterval(timetaken);\n            })\n",
    "Lock": true,
    "Owner": "jvinod408@gmail.com"
  }
]